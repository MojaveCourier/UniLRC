// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proxy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proxy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proxy_2eproto;
namespace proxy_proto {
class AppendStripeDataPlacement;
struct AppendStripeDataPlacementDefaultTypeInternal;
extern AppendStripeDataPlacementDefaultTypeInternal _AppendStripeDataPlacement_default_instance_;
class AskIfSuccess;
struct AskIfSuccessDefaultTypeInternal;
extern AskIfSuccessDefaultTypeInternal _AskIfSuccess_default_instance_;
class CheckaliveCMD;
struct CheckaliveCMDDefaultTypeInternal;
extern CheckaliveCMDDefaultTypeInternal _CheckaliveCMD_default_instance_;
class DegradedReadRequest;
struct DegradedReadRequestDefaultTypeInternal;
extern DegradedReadRequestDefaultTypeInternal _DegradedReadRequest_default_instance_;
class DelReply;
struct DelReplyDefaultTypeInternal;
extern DelReplyDefaultTypeInternal _DelReply_default_instance_;
class GetReply;
struct GetReplyDefaultTypeInternal;
extern GetReplyDefaultTypeInternal _GetReply_default_instance_;
class NodeAndBlock;
struct NodeAndBlockDefaultTypeInternal;
extern NodeAndBlockDefaultTypeInternal _NodeAndBlock_default_instance_;
class ObjectAndPlacement;
struct ObjectAndPlacementDefaultTypeInternal;
extern ObjectAndPlacementDefaultTypeInternal _ObjectAndPlacement_default_instance_;
class RecalReply;
struct RecalReplyDefaultTypeInternal;
extern RecalReplyDefaultTypeInternal _RecalReply_default_instance_;
class RecoveryRequest;
struct RecoveryRequestDefaultTypeInternal;
extern RecoveryRequestDefaultTypeInternal _RecoveryRequest_default_instance_;
class RepIfSuccess;
struct RepIfSuccessDefaultTypeInternal;
extern RepIfSuccessDefaultTypeInternal _RepIfSuccess_default_instance_;
class RequestResult;
struct RequestResultDefaultTypeInternal;
extern RequestResultDefaultTypeInternal _RequestResult_default_instance_;
class SetReply;
struct SetReplyDefaultTypeInternal;
extern SetReplyDefaultTypeInternal _SetReply_default_instance_;
class StripeAndBlockIDs;
struct StripeAndBlockIDsDefaultTypeInternal;
extern StripeAndBlockIDsDefaultTypeInternal _StripeAndBlockIDs_default_instance_;
class blockRelocPlan;
struct blockRelocPlanDefaultTypeInternal;
extern blockRelocPlanDefaultTypeInternal _blockRelocPlan_default_instance_;
class blockRelocReply;
struct blockRelocReplyDefaultTypeInternal;
extern blockRelocReplyDefaultTypeInternal _blockRelocReply_default_instance_;
class helpRecalPlan;
struct helpRecalPlanDefaultTypeInternal;
extern helpRecalPlanDefaultTypeInternal _helpRecalPlan_default_instance_;
class locationInfo;
struct locationInfoDefaultTypeInternal;
extern locationInfoDefaultTypeInternal _locationInfo_default_instance_;
class mainRecalPlan;
struct mainRecalPlanDefaultTypeInternal;
extern mainRecalPlanDefaultTypeInternal _mainRecalPlan_default_instance_;
}  // namespace proxy_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proxy_proto::AppendStripeDataPlacement* Arena::CreateMaybeMessage<::proxy_proto::AppendStripeDataPlacement>(Arena*);
template<> ::proxy_proto::AskIfSuccess* Arena::CreateMaybeMessage<::proxy_proto::AskIfSuccess>(Arena*);
template<> ::proxy_proto::CheckaliveCMD* Arena::CreateMaybeMessage<::proxy_proto::CheckaliveCMD>(Arena*);
template<> ::proxy_proto::DegradedReadRequest* Arena::CreateMaybeMessage<::proxy_proto::DegradedReadRequest>(Arena*);
template<> ::proxy_proto::DelReply* Arena::CreateMaybeMessage<::proxy_proto::DelReply>(Arena*);
template<> ::proxy_proto::GetReply* Arena::CreateMaybeMessage<::proxy_proto::GetReply>(Arena*);
template<> ::proxy_proto::NodeAndBlock* Arena::CreateMaybeMessage<::proxy_proto::NodeAndBlock>(Arena*);
template<> ::proxy_proto::ObjectAndPlacement* Arena::CreateMaybeMessage<::proxy_proto::ObjectAndPlacement>(Arena*);
template<> ::proxy_proto::RecalReply* Arena::CreateMaybeMessage<::proxy_proto::RecalReply>(Arena*);
template<> ::proxy_proto::RecoveryRequest* Arena::CreateMaybeMessage<::proxy_proto::RecoveryRequest>(Arena*);
template<> ::proxy_proto::RepIfSuccess* Arena::CreateMaybeMessage<::proxy_proto::RepIfSuccess>(Arena*);
template<> ::proxy_proto::RequestResult* Arena::CreateMaybeMessage<::proxy_proto::RequestResult>(Arena*);
template<> ::proxy_proto::SetReply* Arena::CreateMaybeMessage<::proxy_proto::SetReply>(Arena*);
template<> ::proxy_proto::StripeAndBlockIDs* Arena::CreateMaybeMessage<::proxy_proto::StripeAndBlockIDs>(Arena*);
template<> ::proxy_proto::blockRelocPlan* Arena::CreateMaybeMessage<::proxy_proto::blockRelocPlan>(Arena*);
template<> ::proxy_proto::blockRelocReply* Arena::CreateMaybeMessage<::proxy_proto::blockRelocReply>(Arena*);
template<> ::proxy_proto::helpRecalPlan* Arena::CreateMaybeMessage<::proxy_proto::helpRecalPlan>(Arena*);
template<> ::proxy_proto::locationInfo* Arena::CreateMaybeMessage<::proxy_proto::locationInfo>(Arena*);
template<> ::proxy_proto::mainRecalPlan* Arena::CreateMaybeMessage<::proxy_proto::mainRecalPlan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proxy_proto {

// ===================================================================

class locationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.locationInfo) */ {
 public:
  inline locationInfo() : locationInfo(nullptr) {}
  ~locationInfo() override;
  explicit PROTOBUF_CONSTEXPR locationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  locationInfo(const locationInfo& from);
  locationInfo(locationInfo&& from) noexcept
    : locationInfo() {
    *this = ::std::move(from);
  }

  inline locationInfo& operator=(const locationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline locationInfo& operator=(locationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const locationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const locationInfo* internal_default_instance() {
    return reinterpret_cast<const locationInfo*>(
               &_locationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(locationInfo& a, locationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(locationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(locationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  locationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<locationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const locationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const locationInfo& from) {
    locationInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(locationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.locationInfo";
  }
  protected:
  explicit locationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatanodeipFieldNumber = 4,
    kDatanodeportFieldNumber = 5,
    kBlockkeysFieldNumber = 6,
    kBlockidsFieldNumber = 7,
    kProxyIpFieldNumber = 2,
    kClusterIdFieldNumber = 1,
    kProxyPortFieldNumber = 3,
  };
  // repeated string datanodeip = 4;
  int datanodeip_size() const;
  private:
  int _internal_datanodeip_size() const;
  public:
  void clear_datanodeip();
  const std::string& datanodeip(int index) const;
  std::string* mutable_datanodeip(int index);
  void set_datanodeip(int index, const std::string& value);
  void set_datanodeip(int index, std::string&& value);
  void set_datanodeip(int index, const char* value);
  void set_datanodeip(int index, const char* value, size_t size);
  std::string* add_datanodeip();
  void add_datanodeip(const std::string& value);
  void add_datanodeip(std::string&& value);
  void add_datanodeip(const char* value);
  void add_datanodeip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& datanodeip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_datanodeip();
  private:
  const std::string& _internal_datanodeip(int index) const;
  std::string* _internal_add_datanodeip();
  public:

  // repeated int32 datanodeport = 5;
  int datanodeport_size() const;
  private:
  int _internal_datanodeport_size() const;
  public:
  void clear_datanodeport();
  private:
  int32_t _internal_datanodeport(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_datanodeport() const;
  void _internal_add_datanodeport(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_datanodeport();
  public:
  int32_t datanodeport(int index) const;
  void set_datanodeport(int index, int32_t value);
  void add_datanodeport(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      datanodeport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_datanodeport();

  // repeated string blockkeys = 6;
  int blockkeys_size() const;
  private:
  int _internal_blockkeys_size() const;
  public:
  void clear_blockkeys();
  const std::string& blockkeys(int index) const;
  std::string* mutable_blockkeys(int index);
  void set_blockkeys(int index, const std::string& value);
  void set_blockkeys(int index, std::string&& value);
  void set_blockkeys(int index, const char* value);
  void set_blockkeys(int index, const char* value, size_t size);
  std::string* add_blockkeys();
  void add_blockkeys(const std::string& value);
  void add_blockkeys(std::string&& value);
  void add_blockkeys(const char* value);
  void add_blockkeys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blockkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blockkeys();
  private:
  const std::string& _internal_blockkeys(int index) const;
  std::string* _internal_add_blockkeys();
  public:

  // repeated int32 blockids = 7;
  int blockids_size() const;
  private:
  int _internal_blockids_size() const;
  public:
  void clear_blockids();
  private:
  int32_t _internal_blockids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_blockids() const;
  void _internal_add_blockids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_blockids();
  public:
  int32_t blockids(int index) const;
  void set_blockids(int index, int32_t value);
  void add_blockids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      blockids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_blockids();

  // string proxy_ip = 2;
  void clear_proxy_ip();
  const std::string& proxy_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxy_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxy_ip();
  PROTOBUF_NODISCARD std::string* release_proxy_ip();
  void set_allocated_proxy_ip(std::string* proxy_ip);
  private:
  const std::string& _internal_proxy_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxy_ip(const std::string& value);
  std::string* _internal_mutable_proxy_ip();
  public:

  // int32 cluster_id = 1;
  void clear_cluster_id();
  int32_t cluster_id() const;
  void set_cluster_id(int32_t value);
  private:
  int32_t _internal_cluster_id() const;
  void _internal_set_cluster_id(int32_t value);
  public:

  // int32 proxy_port = 3;
  void clear_proxy_port();
  int32_t proxy_port() const;
  void set_proxy_port(int32_t value);
  private:
  int32_t _internal_proxy_port() const;
  void _internal_set_proxy_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.locationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> datanodeip_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > datanodeport_;
    mutable std::atomic<int> _datanodeport_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blockkeys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > blockids_;
    mutable std::atomic<int> _blockids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxy_ip_;
    int32_t cluster_id_;
    int32_t proxy_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class mainRecalPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.mainRecalPlan) */ {
 public:
  inline mainRecalPlan() : mainRecalPlan(nullptr) {}
  ~mainRecalPlan() override;
  explicit PROTOBUF_CONSTEXPR mainRecalPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mainRecalPlan(const mainRecalPlan& from);
  mainRecalPlan(mainRecalPlan&& from) noexcept
    : mainRecalPlan() {
    *this = ::std::move(from);
  }

  inline mainRecalPlan& operator=(const mainRecalPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline mainRecalPlan& operator=(mainRecalPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mainRecalPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const mainRecalPlan* internal_default_instance() {
    return reinterpret_cast<const mainRecalPlan*>(
               &_mainRecalPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(mainRecalPlan& a, mainRecalPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(mainRecalPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mainRecalPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mainRecalPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mainRecalPlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mainRecalPlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const mainRecalPlan& from) {
    mainRecalPlan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mainRecalPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.mainRecalPlan";
  }
  protected:
  explicit mainRecalPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClustersFieldNumber = 3,
    kPDatanodeipFieldNumber = 4,
    kPDatanodeportFieldNumber = 5,
    kPBlockkeysFieldNumber = 6,
    kTypeFieldNumber = 1,
    kIfPartialDecodingFieldNumber = 2,
    kKFieldNumber = 7,
    kLFieldNumber = 8,
    kGMFieldNumber = 9,
    kBlockSizeFieldNumber = 10,
    kEncodetypeFieldNumber = 11,
    kStripeIdFieldNumber = 12,
    kGroupIdFieldNumber = 13,
  };
  // repeated .proxy_proto.locationInfo clusters = 3;
  int clusters_size() const;
  private:
  int _internal_clusters_size() const;
  public:
  void clear_clusters();
  ::proxy_proto::locationInfo* mutable_clusters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proxy_proto::locationInfo >*
      mutable_clusters();
  private:
  const ::proxy_proto::locationInfo& _internal_clusters(int index) const;
  ::proxy_proto::locationInfo* _internal_add_clusters();
  public:
  const ::proxy_proto::locationInfo& clusters(int index) const;
  ::proxy_proto::locationInfo* add_clusters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proxy_proto::locationInfo >&
      clusters() const;

  // repeated string p_datanodeip = 4;
  int p_datanodeip_size() const;
  private:
  int _internal_p_datanodeip_size() const;
  public:
  void clear_p_datanodeip();
  const std::string& p_datanodeip(int index) const;
  std::string* mutable_p_datanodeip(int index);
  void set_p_datanodeip(int index, const std::string& value);
  void set_p_datanodeip(int index, std::string&& value);
  void set_p_datanodeip(int index, const char* value);
  void set_p_datanodeip(int index, const char* value, size_t size);
  std::string* add_p_datanodeip();
  void add_p_datanodeip(const std::string& value);
  void add_p_datanodeip(std::string&& value);
  void add_p_datanodeip(const char* value);
  void add_p_datanodeip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& p_datanodeip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_p_datanodeip();
  private:
  const std::string& _internal_p_datanodeip(int index) const;
  std::string* _internal_add_p_datanodeip();
  public:

  // repeated int32 p_datanodeport = 5;
  int p_datanodeport_size() const;
  private:
  int _internal_p_datanodeport_size() const;
  public:
  void clear_p_datanodeport();
  private:
  int32_t _internal_p_datanodeport(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_p_datanodeport() const;
  void _internal_add_p_datanodeport(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_p_datanodeport();
  public:
  int32_t p_datanodeport(int index) const;
  void set_p_datanodeport(int index, int32_t value);
  void add_p_datanodeport(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      p_datanodeport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_p_datanodeport();

  // repeated string p_blockkeys = 6;
  int p_blockkeys_size() const;
  private:
  int _internal_p_blockkeys_size() const;
  public:
  void clear_p_blockkeys();
  const std::string& p_blockkeys(int index) const;
  std::string* mutable_p_blockkeys(int index);
  void set_p_blockkeys(int index, const std::string& value);
  void set_p_blockkeys(int index, std::string&& value);
  void set_p_blockkeys(int index, const char* value);
  void set_p_blockkeys(int index, const char* value, size_t size);
  std::string* add_p_blockkeys();
  void add_p_blockkeys(const std::string& value);
  void add_p_blockkeys(std::string&& value);
  void add_p_blockkeys(const char* value);
  void add_p_blockkeys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& p_blockkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_p_blockkeys();
  private:
  const std::string& _internal_p_blockkeys(int index) const;
  std::string* _internal_add_p_blockkeys();
  public:

  // bool type = 1;
  void clear_type();
  bool type() const;
  void set_type(bool value);
  private:
  bool _internal_type() const;
  void _internal_set_type(bool value);
  public:

  // bool if_partial_decoding = 2;
  void clear_if_partial_decoding();
  bool if_partial_decoding() const;
  void set_if_partial_decoding(bool value);
  private:
  bool _internal_if_partial_decoding() const;
  void _internal_set_if_partial_decoding(bool value);
  public:

  // int32 k = 7;
  void clear_k();
  int32_t k() const;
  void set_k(int32_t value);
  private:
  int32_t _internal_k() const;
  void _internal_set_k(int32_t value);
  public:

  // int32 l = 8;
  void clear_l();
  int32_t l() const;
  void set_l(int32_t value);
  private:
  int32_t _internal_l() const;
  void _internal_set_l(int32_t value);
  public:

  // int32 g_m = 9;
  void clear_g_m();
  int32_t g_m() const;
  void set_g_m(int32_t value);
  private:
  int32_t _internal_g_m() const;
  void _internal_set_g_m(int32_t value);
  public:

  // int32 block_size = 10;
  void clear_block_size();
  int32_t block_size() const;
  void set_block_size(int32_t value);
  private:
  int32_t _internal_block_size() const;
  void _internal_set_block_size(int32_t value);
  public:

  // int32 encodetype = 11;
  void clear_encodetype();
  int32_t encodetype() const;
  void set_encodetype(int32_t value);
  private:
  int32_t _internal_encodetype() const;
  void _internal_set_encodetype(int32_t value);
  public:

  // int32 stripe_id = 12;
  void clear_stripe_id();
  int32_t stripe_id() const;
  void set_stripe_id(int32_t value);
  private:
  int32_t _internal_stripe_id() const;
  void _internal_set_stripe_id(int32_t value);
  public:

  // int32 group_id = 13;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.mainRecalPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proxy_proto::locationInfo > clusters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> p_datanodeip_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > p_datanodeport_;
    mutable std::atomic<int> _p_datanodeport_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> p_blockkeys_;
    bool type_;
    bool if_partial_decoding_;
    int32_t k_;
    int32_t l_;
    int32_t g_m_;
    int32_t block_size_;
    int32_t encodetype_;
    int32_t stripe_id_;
    int32_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class RecalReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.RecalReply) */ {
 public:
  inline RecalReply() : RecalReply(nullptr) {}
  ~RecalReply() override;
  explicit PROTOBUF_CONSTEXPR RecalReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecalReply(const RecalReply& from);
  RecalReply(RecalReply&& from) noexcept
    : RecalReply() {
    *this = ::std::move(from);
  }

  inline RecalReply& operator=(const RecalReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecalReply& operator=(RecalReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecalReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecalReply* internal_default_instance() {
    return reinterpret_cast<const RecalReply*>(
               &_RecalReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RecalReply& a, RecalReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RecalReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecalReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecalReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecalReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecalReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecalReply& from) {
    RecalReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecalReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.RecalReply";
  }
  protected:
  explicit RecalReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.RecalReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class helpRecalPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.helpRecalPlan) */ {
 public:
  inline helpRecalPlan() : helpRecalPlan(nullptr) {}
  ~helpRecalPlan() override;
  explicit PROTOBUF_CONSTEXPR helpRecalPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  helpRecalPlan(const helpRecalPlan& from);
  helpRecalPlan(helpRecalPlan&& from) noexcept
    : helpRecalPlan() {
    *this = ::std::move(from);
  }

  inline helpRecalPlan& operator=(const helpRecalPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline helpRecalPlan& operator=(helpRecalPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const helpRecalPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const helpRecalPlan* internal_default_instance() {
    return reinterpret_cast<const helpRecalPlan*>(
               &_helpRecalPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(helpRecalPlan& a, helpRecalPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(helpRecalPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(helpRecalPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  helpRecalPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<helpRecalPlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const helpRecalPlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const helpRecalPlan& from) {
    helpRecalPlan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(helpRecalPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.helpRecalPlan";
  }
  protected:
  explicit helpRecalPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatanodeipFieldNumber = 5,
    kDatanodeportFieldNumber = 6,
    kBlockkeysFieldNumber = 7,
    kBlockidsFieldNumber = 9,
    kMainproxyipFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIfPartialDecodingFieldNumber = 2,
    kMainproxyportFieldNumber = 4,
    kBlockSizeFieldNumber = 8,
    kParityNumFieldNumber = 10,
    kKFieldNumber = 11,
    kEncodetypeFieldNumber = 12,
  };
  // repeated string datanodeip = 5;
  int datanodeip_size() const;
  private:
  int _internal_datanodeip_size() const;
  public:
  void clear_datanodeip();
  const std::string& datanodeip(int index) const;
  std::string* mutable_datanodeip(int index);
  void set_datanodeip(int index, const std::string& value);
  void set_datanodeip(int index, std::string&& value);
  void set_datanodeip(int index, const char* value);
  void set_datanodeip(int index, const char* value, size_t size);
  std::string* add_datanodeip();
  void add_datanodeip(const std::string& value);
  void add_datanodeip(std::string&& value);
  void add_datanodeip(const char* value);
  void add_datanodeip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& datanodeip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_datanodeip();
  private:
  const std::string& _internal_datanodeip(int index) const;
  std::string* _internal_add_datanodeip();
  public:

  // repeated int32 datanodeport = 6;
  int datanodeport_size() const;
  private:
  int _internal_datanodeport_size() const;
  public:
  void clear_datanodeport();
  private:
  int32_t _internal_datanodeport(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_datanodeport() const;
  void _internal_add_datanodeport(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_datanodeport();
  public:
  int32_t datanodeport(int index) const;
  void set_datanodeport(int index, int32_t value);
  void add_datanodeport(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      datanodeport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_datanodeport();

  // repeated string blockkeys = 7;
  int blockkeys_size() const;
  private:
  int _internal_blockkeys_size() const;
  public:
  void clear_blockkeys();
  const std::string& blockkeys(int index) const;
  std::string* mutable_blockkeys(int index);
  void set_blockkeys(int index, const std::string& value);
  void set_blockkeys(int index, std::string&& value);
  void set_blockkeys(int index, const char* value);
  void set_blockkeys(int index, const char* value, size_t size);
  std::string* add_blockkeys();
  void add_blockkeys(const std::string& value);
  void add_blockkeys(std::string&& value);
  void add_blockkeys(const char* value);
  void add_blockkeys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blockkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blockkeys();
  private:
  const std::string& _internal_blockkeys(int index) const;
  std::string* _internal_add_blockkeys();
  public:

  // repeated int32 blockids = 9;
  int blockids_size() const;
  private:
  int _internal_blockids_size() const;
  public:
  void clear_blockids();
  private:
  int32_t _internal_blockids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_blockids() const;
  void _internal_add_blockids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_blockids();
  public:
  int32_t blockids(int index) const;
  void set_blockids(int index, int32_t value);
  void add_blockids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      blockids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_blockids();

  // string mainproxyip = 3;
  void clear_mainproxyip();
  const std::string& mainproxyip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mainproxyip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mainproxyip();
  PROTOBUF_NODISCARD std::string* release_mainproxyip();
  void set_allocated_mainproxyip(std::string* mainproxyip);
  private:
  const std::string& _internal_mainproxyip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mainproxyip(const std::string& value);
  std::string* _internal_mutable_mainproxyip();
  public:

  // bool type = 1;
  void clear_type();
  bool type() const;
  void set_type(bool value);
  private:
  bool _internal_type() const;
  void _internal_set_type(bool value);
  public:

  // bool if_partial_decoding = 2;
  void clear_if_partial_decoding();
  bool if_partial_decoding() const;
  void set_if_partial_decoding(bool value);
  private:
  bool _internal_if_partial_decoding() const;
  void _internal_set_if_partial_decoding(bool value);
  public:

  // int32 mainproxyport = 4;
  void clear_mainproxyport();
  int32_t mainproxyport() const;
  void set_mainproxyport(int32_t value);
  private:
  int32_t _internal_mainproxyport() const;
  void _internal_set_mainproxyport(int32_t value);
  public:

  // int32 block_size = 8;
  void clear_block_size();
  int32_t block_size() const;
  void set_block_size(int32_t value);
  private:
  int32_t _internal_block_size() const;
  void _internal_set_block_size(int32_t value);
  public:

  // int32 parity_num = 10;
  void clear_parity_num();
  int32_t parity_num() const;
  void set_parity_num(int32_t value);
  private:
  int32_t _internal_parity_num() const;
  void _internal_set_parity_num(int32_t value);
  public:

  // int32 k = 11;
  void clear_k();
  int32_t k() const;
  void set_k(int32_t value);
  private:
  int32_t _internal_k() const;
  void _internal_set_k(int32_t value);
  public:

  // int32 encodetype = 12;
  void clear_encodetype();
  int32_t encodetype() const;
  void set_encodetype(int32_t value);
  private:
  int32_t _internal_encodetype() const;
  void _internal_set_encodetype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.helpRecalPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> datanodeip_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > datanodeport_;
    mutable std::atomic<int> _datanodeport_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blockkeys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > blockids_;
    mutable std::atomic<int> _blockids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainproxyip_;
    bool type_;
    bool if_partial_decoding_;
    int32_t mainproxyport_;
    int32_t block_size_;
    int32_t parity_num_;
    int32_t k_;
    int32_t encodetype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class blockRelocPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.blockRelocPlan) */ {
 public:
  inline blockRelocPlan() : blockRelocPlan(nullptr) {}
  ~blockRelocPlan() override;
  explicit PROTOBUF_CONSTEXPR blockRelocPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  blockRelocPlan(const blockRelocPlan& from);
  blockRelocPlan(blockRelocPlan&& from) noexcept
    : blockRelocPlan() {
    *this = ::std::move(from);
  }

  inline blockRelocPlan& operator=(const blockRelocPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline blockRelocPlan& operator=(blockRelocPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const blockRelocPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const blockRelocPlan* internal_default_instance() {
    return reinterpret_cast<const blockRelocPlan*>(
               &_blockRelocPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(blockRelocPlan& a, blockRelocPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(blockRelocPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(blockRelocPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  blockRelocPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<blockRelocPlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const blockRelocPlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const blockRelocPlan& from) {
    blockRelocPlan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(blockRelocPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.blockRelocPlan";
  }
  protected:
  explicit blockRelocPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocktomoveFieldNumber = 1,
    kFromdatanodeipFieldNumber = 2,
    kFromdatanodeportFieldNumber = 3,
    kTodatanodeipFieldNumber = 4,
    kTodatanodeportFieldNumber = 5,
    kBlockSizeFieldNumber = 6,
  };
  // repeated string blocktomove = 1;
  int blocktomove_size() const;
  private:
  int _internal_blocktomove_size() const;
  public:
  void clear_blocktomove();
  const std::string& blocktomove(int index) const;
  std::string* mutable_blocktomove(int index);
  void set_blocktomove(int index, const std::string& value);
  void set_blocktomove(int index, std::string&& value);
  void set_blocktomove(int index, const char* value);
  void set_blocktomove(int index, const char* value, size_t size);
  std::string* add_blocktomove();
  void add_blocktomove(const std::string& value);
  void add_blocktomove(std::string&& value);
  void add_blocktomove(const char* value);
  void add_blocktomove(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blocktomove() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blocktomove();
  private:
  const std::string& _internal_blocktomove(int index) const;
  std::string* _internal_add_blocktomove();
  public:

  // repeated string fromdatanodeip = 2;
  int fromdatanodeip_size() const;
  private:
  int _internal_fromdatanodeip_size() const;
  public:
  void clear_fromdatanodeip();
  const std::string& fromdatanodeip(int index) const;
  std::string* mutable_fromdatanodeip(int index);
  void set_fromdatanodeip(int index, const std::string& value);
  void set_fromdatanodeip(int index, std::string&& value);
  void set_fromdatanodeip(int index, const char* value);
  void set_fromdatanodeip(int index, const char* value, size_t size);
  std::string* add_fromdatanodeip();
  void add_fromdatanodeip(const std::string& value);
  void add_fromdatanodeip(std::string&& value);
  void add_fromdatanodeip(const char* value);
  void add_fromdatanodeip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fromdatanodeip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fromdatanodeip();
  private:
  const std::string& _internal_fromdatanodeip(int index) const;
  std::string* _internal_add_fromdatanodeip();
  public:

  // repeated int32 fromdatanodeport = 3;
  int fromdatanodeport_size() const;
  private:
  int _internal_fromdatanodeport_size() const;
  public:
  void clear_fromdatanodeport();
  private:
  int32_t _internal_fromdatanodeport(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_fromdatanodeport() const;
  void _internal_add_fromdatanodeport(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_fromdatanodeport();
  public:
  int32_t fromdatanodeport(int index) const;
  void set_fromdatanodeport(int index, int32_t value);
  void add_fromdatanodeport(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      fromdatanodeport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_fromdatanodeport();

  // repeated string todatanodeip = 4;
  int todatanodeip_size() const;
  private:
  int _internal_todatanodeip_size() const;
  public:
  void clear_todatanodeip();
  const std::string& todatanodeip(int index) const;
  std::string* mutable_todatanodeip(int index);
  void set_todatanodeip(int index, const std::string& value);
  void set_todatanodeip(int index, std::string&& value);
  void set_todatanodeip(int index, const char* value);
  void set_todatanodeip(int index, const char* value, size_t size);
  std::string* add_todatanodeip();
  void add_todatanodeip(const std::string& value);
  void add_todatanodeip(std::string&& value);
  void add_todatanodeip(const char* value);
  void add_todatanodeip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& todatanodeip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_todatanodeip();
  private:
  const std::string& _internal_todatanodeip(int index) const;
  std::string* _internal_add_todatanodeip();
  public:

  // repeated int32 todatanodeport = 5;
  int todatanodeport_size() const;
  private:
  int _internal_todatanodeport_size() const;
  public:
  void clear_todatanodeport();
  private:
  int32_t _internal_todatanodeport(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_todatanodeport() const;
  void _internal_add_todatanodeport(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_todatanodeport();
  public:
  int32_t todatanodeport(int index) const;
  void set_todatanodeport(int index, int32_t value);
  void add_todatanodeport(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      todatanodeport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_todatanodeport();

  // int32 block_size = 6;
  void clear_block_size();
  int32_t block_size() const;
  void set_block_size(int32_t value);
  private:
  int32_t _internal_block_size() const;
  void _internal_set_block_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.blockRelocPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blocktomove_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fromdatanodeip_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > fromdatanodeport_;
    mutable std::atomic<int> _fromdatanodeport_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> todatanodeip_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > todatanodeport_;
    mutable std::atomic<int> _todatanodeport_cached_byte_size_;
    int32_t block_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class blockRelocReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.blockRelocReply) */ {
 public:
  inline blockRelocReply() : blockRelocReply(nullptr) {}
  ~blockRelocReply() override;
  explicit PROTOBUF_CONSTEXPR blockRelocReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  blockRelocReply(const blockRelocReply& from);
  blockRelocReply(blockRelocReply&& from) noexcept
    : blockRelocReply() {
    *this = ::std::move(from);
  }

  inline blockRelocReply& operator=(const blockRelocReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline blockRelocReply& operator=(blockRelocReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const blockRelocReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const blockRelocReply* internal_default_instance() {
    return reinterpret_cast<const blockRelocReply*>(
               &_blockRelocReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(blockRelocReply& a, blockRelocReply& b) {
    a.Swap(&b);
  }
  inline void Swap(blockRelocReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(blockRelocReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  blockRelocReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<blockRelocReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const blockRelocReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const blockRelocReply& from) {
    blockRelocReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(blockRelocReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.blockRelocReply";
  }
  protected:
  explicit blockRelocReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.blockRelocReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class AskIfSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.AskIfSuccess) */ {
 public:
  inline AskIfSuccess() : AskIfSuccess(nullptr) {}
  ~AskIfSuccess() override;
  explicit PROTOBUF_CONSTEXPR AskIfSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AskIfSuccess(const AskIfSuccess& from);
  AskIfSuccess(AskIfSuccess&& from) noexcept
    : AskIfSuccess() {
    *this = ::std::move(from);
  }

  inline AskIfSuccess& operator=(const AskIfSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskIfSuccess& operator=(AskIfSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AskIfSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const AskIfSuccess* internal_default_instance() {
    return reinterpret_cast<const AskIfSuccess*>(
               &_AskIfSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AskIfSuccess& a, AskIfSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(AskIfSuccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AskIfSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AskIfSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AskIfSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AskIfSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AskIfSuccess& from) {
    AskIfSuccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AskIfSuccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.AskIfSuccess";
  }
  protected:
  explicit AskIfSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepFieldNumber = 1,
  };
  // int32 step = 1;
  void clear_step();
  int32_t step() const;
  void set_step(int32_t value);
  private:
  int32_t _internal_step() const;
  void _internal_set_step(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.AskIfSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t step_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class RepIfSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.RepIfSuccess) */ {
 public:
  inline RepIfSuccess() : RepIfSuccess(nullptr) {}
  ~RepIfSuccess() override;
  explicit PROTOBUF_CONSTEXPR RepIfSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepIfSuccess(const RepIfSuccess& from);
  RepIfSuccess(RepIfSuccess&& from) noexcept
    : RepIfSuccess() {
    *this = ::std::move(from);
  }

  inline RepIfSuccess& operator=(const RepIfSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepIfSuccess& operator=(RepIfSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepIfSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepIfSuccess* internal_default_instance() {
    return reinterpret_cast<const RepIfSuccess*>(
               &_RepIfSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RepIfSuccess& a, RepIfSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(RepIfSuccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepIfSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepIfSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepIfSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepIfSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepIfSuccess& from) {
    RepIfSuccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepIfSuccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.RepIfSuccess";
  }
  protected:
  explicit RepIfSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfsuccessFieldNumber = 1,
  };
  // bool ifsuccess = 1;
  void clear_ifsuccess();
  bool ifsuccess() const;
  void set_ifsuccess(bool value);
  private:
  bool _internal_ifsuccess() const;
  void _internal_set_ifsuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.RepIfSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ifsuccess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class NodeAndBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.NodeAndBlock) */ {
 public:
  inline NodeAndBlock() : NodeAndBlock(nullptr) {}
  ~NodeAndBlock() override;
  explicit PROTOBUF_CONSTEXPR NodeAndBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeAndBlock(const NodeAndBlock& from);
  NodeAndBlock(NodeAndBlock&& from) noexcept
    : NodeAndBlock() {
    *this = ::std::move(from);
  }

  inline NodeAndBlock& operator=(const NodeAndBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeAndBlock& operator=(NodeAndBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeAndBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeAndBlock* internal_default_instance() {
    return reinterpret_cast<const NodeAndBlock*>(
               &_NodeAndBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NodeAndBlock& a, NodeAndBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeAndBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeAndBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeAndBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeAndBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeAndBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeAndBlock& from) {
    NodeAndBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeAndBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.NodeAndBlock";
  }
  protected:
  explicit NodeAndBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockkeysFieldNumber = 1,
    kDatanodeipFieldNumber = 2,
    kDatanodeportFieldNumber = 3,
    kKeyFieldNumber = 5,
    kStripeIdFieldNumber = 4,
  };
  // repeated string blockkeys = 1;
  int blockkeys_size() const;
  private:
  int _internal_blockkeys_size() const;
  public:
  void clear_blockkeys();
  const std::string& blockkeys(int index) const;
  std::string* mutable_blockkeys(int index);
  void set_blockkeys(int index, const std::string& value);
  void set_blockkeys(int index, std::string&& value);
  void set_blockkeys(int index, const char* value);
  void set_blockkeys(int index, const char* value, size_t size);
  std::string* add_blockkeys();
  void add_blockkeys(const std::string& value);
  void add_blockkeys(std::string&& value);
  void add_blockkeys(const char* value);
  void add_blockkeys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blockkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blockkeys();
  private:
  const std::string& _internal_blockkeys(int index) const;
  std::string* _internal_add_blockkeys();
  public:

  // repeated string datanodeip = 2;
  int datanodeip_size() const;
  private:
  int _internal_datanodeip_size() const;
  public:
  void clear_datanodeip();
  const std::string& datanodeip(int index) const;
  std::string* mutable_datanodeip(int index);
  void set_datanodeip(int index, const std::string& value);
  void set_datanodeip(int index, std::string&& value);
  void set_datanodeip(int index, const char* value);
  void set_datanodeip(int index, const char* value, size_t size);
  std::string* add_datanodeip();
  void add_datanodeip(const std::string& value);
  void add_datanodeip(std::string&& value);
  void add_datanodeip(const char* value);
  void add_datanodeip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& datanodeip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_datanodeip();
  private:
  const std::string& _internal_datanodeip(int index) const;
  std::string* _internal_add_datanodeip();
  public:

  // repeated int32 datanodeport = 3;
  int datanodeport_size() const;
  private:
  int _internal_datanodeport_size() const;
  public:
  void clear_datanodeport();
  private:
  int32_t _internal_datanodeport(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_datanodeport() const;
  void _internal_add_datanodeport(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_datanodeport();
  public:
  int32_t datanodeport(int index) const;
  void set_datanodeport(int index, int32_t value);
  void add_datanodeport(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      datanodeport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_datanodeport();

  // string key = 5;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 stripe_id = 4;
  void clear_stripe_id();
  int32_t stripe_id() const;
  void set_stripe_id(int32_t value);
  private:
  int32_t _internal_stripe_id() const;
  void _internal_set_stripe_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.NodeAndBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blockkeys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> datanodeip_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > datanodeport_;
    mutable std::atomic<int> _datanodeport_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    int32_t stripe_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class DelReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.DelReply) */ {
 public:
  inline DelReply() : DelReply(nullptr) {}
  ~DelReply() override;
  explicit PROTOBUF_CONSTEXPR DelReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelReply(const DelReply& from);
  DelReply(DelReply&& from) noexcept
    : DelReply() {
    *this = ::std::move(from);
  }

  inline DelReply& operator=(const DelReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelReply& operator=(DelReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelReply* internal_default_instance() {
    return reinterpret_cast<const DelReply*>(
               &_DelReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DelReply& a, DelReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DelReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelReply& from) {
    DelReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.DelReply";
  }
  protected:
  explicit DelReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfcommitFieldNumber = 1,
  };
  // bool ifcommit = 1;
  void clear_ifcommit();
  bool ifcommit() const;
  void set_ifcommit(bool value);
  private:
  bool _internal_ifcommit() const;
  void _internal_set_ifcommit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.DelReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ifcommit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class CheckaliveCMD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.CheckaliveCMD) */ {
 public:
  inline CheckaliveCMD() : CheckaliveCMD(nullptr) {}
  ~CheckaliveCMD() override;
  explicit PROTOBUF_CONSTEXPR CheckaliveCMD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckaliveCMD(const CheckaliveCMD& from);
  CheckaliveCMD(CheckaliveCMD&& from) noexcept
    : CheckaliveCMD() {
    *this = ::std::move(from);
  }

  inline CheckaliveCMD& operator=(const CheckaliveCMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckaliveCMD& operator=(CheckaliveCMD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckaliveCMD& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckaliveCMD* internal_default_instance() {
    return reinterpret_cast<const CheckaliveCMD*>(
               &_CheckaliveCMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CheckaliveCMD& a, CheckaliveCMD& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckaliveCMD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckaliveCMD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckaliveCMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckaliveCMD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckaliveCMD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckaliveCMD& from) {
    CheckaliveCMD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckaliveCMD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.CheckaliveCMD";
  }
  protected:
  explicit CheckaliveCMD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.CheckaliveCMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class RequestResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.RequestResult) */ {
 public:
  inline RequestResult() : RequestResult(nullptr) {}
  ~RequestResult() override;
  explicit PROTOBUF_CONSTEXPR RequestResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestResult(const RequestResult& from);
  RequestResult(RequestResult&& from) noexcept
    : RequestResult() {
    *this = ::std::move(from);
  }

  inline RequestResult& operator=(const RequestResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestResult& operator=(RequestResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestResult* internal_default_instance() {
    return reinterpret_cast<const RequestResult*>(
               &_RequestResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RequestResult& a, RequestResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestResult& from) {
    RequestResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.RequestResult";
  }
  protected:
  explicit RequestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // bool message = 1;
  void clear_message();
  bool message() const;
  void set_message(bool value);
  private:
  bool _internal_message() const;
  void _internal_set_message(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.RequestResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class ObjectAndPlacement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.ObjectAndPlacement) */ {
 public:
  inline ObjectAndPlacement() : ObjectAndPlacement(nullptr) {}
  ~ObjectAndPlacement() override;
  explicit PROTOBUF_CONSTEXPR ObjectAndPlacement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectAndPlacement(const ObjectAndPlacement& from);
  ObjectAndPlacement(ObjectAndPlacement&& from) noexcept
    : ObjectAndPlacement() {
    *this = ::std::move(from);
  }

  inline ObjectAndPlacement& operator=(const ObjectAndPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectAndPlacement& operator=(ObjectAndPlacement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectAndPlacement& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectAndPlacement* internal_default_instance() {
    return reinterpret_cast<const ObjectAndPlacement*>(
               &_ObjectAndPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ObjectAndPlacement& a, ObjectAndPlacement& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectAndPlacement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectAndPlacement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectAndPlacement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectAndPlacement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectAndPlacement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectAndPlacement& from) {
    ObjectAndPlacement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectAndPlacement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.ObjectAndPlacement";
  }
  protected:
  explicit ObjectAndPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatanodeipFieldNumber = 7,
    kDatanodeportFieldNumber = 8,
    kBlockkeysFieldNumber = 9,
    kBlockidsFieldNumber = 10,
    kKeyFieldNumber = 1,
    kClientipFieldNumber = 13,
    kValuesizebyteFieldNumber = 2,
    kKFieldNumber = 3,
    kLFieldNumber = 4,
    kGMFieldNumber = 5,
    kStripeIdFieldNumber = 6,
    kBlockSizeFieldNumber = 11,
    kEncodeTypeFieldNumber = 12,
    kClientportFieldNumber = 14,
  };
  // repeated string datanodeip = 7;
  int datanodeip_size() const;
  private:
  int _internal_datanodeip_size() const;
  public:
  void clear_datanodeip();
  const std::string& datanodeip(int index) const;
  std::string* mutable_datanodeip(int index);
  void set_datanodeip(int index, const std::string& value);
  void set_datanodeip(int index, std::string&& value);
  void set_datanodeip(int index, const char* value);
  void set_datanodeip(int index, const char* value, size_t size);
  std::string* add_datanodeip();
  void add_datanodeip(const std::string& value);
  void add_datanodeip(std::string&& value);
  void add_datanodeip(const char* value);
  void add_datanodeip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& datanodeip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_datanodeip();
  private:
  const std::string& _internal_datanodeip(int index) const;
  std::string* _internal_add_datanodeip();
  public:

  // repeated int32 datanodeport = 8;
  int datanodeport_size() const;
  private:
  int _internal_datanodeport_size() const;
  public:
  void clear_datanodeport();
  private:
  int32_t _internal_datanodeport(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_datanodeport() const;
  void _internal_add_datanodeport(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_datanodeport();
  public:
  int32_t datanodeport(int index) const;
  void set_datanodeport(int index, int32_t value);
  void add_datanodeport(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      datanodeport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_datanodeport();

  // repeated string blockkeys = 9;
  int blockkeys_size() const;
  private:
  int _internal_blockkeys_size() const;
  public:
  void clear_blockkeys();
  const std::string& blockkeys(int index) const;
  std::string* mutable_blockkeys(int index);
  void set_blockkeys(int index, const std::string& value);
  void set_blockkeys(int index, std::string&& value);
  void set_blockkeys(int index, const char* value);
  void set_blockkeys(int index, const char* value, size_t size);
  std::string* add_blockkeys();
  void add_blockkeys(const std::string& value);
  void add_blockkeys(std::string&& value);
  void add_blockkeys(const char* value);
  void add_blockkeys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blockkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blockkeys();
  private:
  const std::string& _internal_blockkeys(int index) const;
  std::string* _internal_add_blockkeys();
  public:

  // repeated int32 blockids = 10;
  int blockids_size() const;
  private:
  int _internal_blockids_size() const;
  public:
  void clear_blockids();
  private:
  int32_t _internal_blockids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_blockids() const;
  void _internal_add_blockids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_blockids();
  public:
  int32_t blockids(int index) const;
  void set_blockids(int index, int32_t value);
  void add_blockids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      blockids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_blockids();

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string clientip = 13;
  void clear_clientip();
  const std::string& clientip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientip();
  PROTOBUF_NODISCARD std::string* release_clientip();
  void set_allocated_clientip(std::string* clientip);
  private:
  const std::string& _internal_clientip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientip(const std::string& value);
  std::string* _internal_mutable_clientip();
  public:

  // int32 valuesizebyte = 2;
  void clear_valuesizebyte();
  int32_t valuesizebyte() const;
  void set_valuesizebyte(int32_t value);
  private:
  int32_t _internal_valuesizebyte() const;
  void _internal_set_valuesizebyte(int32_t value);
  public:

  // int32 k = 3;
  void clear_k();
  int32_t k() const;
  void set_k(int32_t value);
  private:
  int32_t _internal_k() const;
  void _internal_set_k(int32_t value);
  public:

  // int32 l = 4;
  void clear_l();
  int32_t l() const;
  void set_l(int32_t value);
  private:
  int32_t _internal_l() const;
  void _internal_set_l(int32_t value);
  public:

  // int32 g_m = 5;
  void clear_g_m();
  int32_t g_m() const;
  void set_g_m(int32_t value);
  private:
  int32_t _internal_g_m() const;
  void _internal_set_g_m(int32_t value);
  public:

  // int32 stripe_id = 6;
  void clear_stripe_id();
  int32_t stripe_id() const;
  void set_stripe_id(int32_t value);
  private:
  int32_t _internal_stripe_id() const;
  void _internal_set_stripe_id(int32_t value);
  public:

  // int32 block_size = 11;
  void clear_block_size();
  int32_t block_size() const;
  void set_block_size(int32_t value);
  private:
  int32_t _internal_block_size() const;
  void _internal_set_block_size(int32_t value);
  public:

  // int32 encode_type = 12;
  void clear_encode_type();
  int32_t encode_type() const;
  void set_encode_type(int32_t value);
  private:
  int32_t _internal_encode_type() const;
  void _internal_set_encode_type(int32_t value);
  public:

  // int32 clientport = 14;
  void clear_clientport();
  int32_t clientport() const;
  void set_clientport(int32_t value);
  private:
  int32_t _internal_clientport() const;
  void _internal_set_clientport(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.ObjectAndPlacement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> datanodeip_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > datanodeport_;
    mutable std::atomic<int> _datanodeport_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blockkeys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > blockids_;
    mutable std::atomic<int> _blockids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientip_;
    int32_t valuesizebyte_;
    int32_t k_;
    int32_t l_;
    int32_t g_m_;
    int32_t stripe_id_;
    int32_t block_size_;
    int32_t encode_type_;
    int32_t clientport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class DegradedReadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.DegradedReadRequest) */ {
 public:
  inline DegradedReadRequest() : DegradedReadRequest(nullptr) {}
  ~DegradedReadRequest() override;
  explicit PROTOBUF_CONSTEXPR DegradedReadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DegradedReadRequest(const DegradedReadRequest& from);
  DegradedReadRequest(DegradedReadRequest&& from) noexcept
    : DegradedReadRequest() {
    *this = ::std::move(from);
  }

  inline DegradedReadRequest& operator=(const DegradedReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DegradedReadRequest& operator=(DegradedReadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DegradedReadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DegradedReadRequest* internal_default_instance() {
    return reinterpret_cast<const DegradedReadRequest*>(
               &_DegradedReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DegradedReadRequest& a, DegradedReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DegradedReadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DegradedReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DegradedReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DegradedReadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DegradedReadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DegradedReadRequest& from) {
    DegradedReadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DegradedReadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.DegradedReadRequest";
  }
  protected:
  explicit DegradedReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatanodeipFieldNumber = 5,
    kDatanodeportFieldNumber = 6,
    kBlockkeysFieldNumber = 7,
    kBlockidsFieldNumber = 8,
    kClientipFieldNumber = 1,
    kFailedBlockKeyFieldNumber = 4,
    kClientportFieldNumber = 2,
    kFailedBlockIdFieldNumber = 3,
  };
  // repeated string datanodeip = 5;
  int datanodeip_size() const;
  private:
  int _internal_datanodeip_size() const;
  public:
  void clear_datanodeip();
  const std::string& datanodeip(int index) const;
  std::string* mutable_datanodeip(int index);
  void set_datanodeip(int index, const std::string& value);
  void set_datanodeip(int index, std::string&& value);
  void set_datanodeip(int index, const char* value);
  void set_datanodeip(int index, const char* value, size_t size);
  std::string* add_datanodeip();
  void add_datanodeip(const std::string& value);
  void add_datanodeip(std::string&& value);
  void add_datanodeip(const char* value);
  void add_datanodeip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& datanodeip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_datanodeip();
  private:
  const std::string& _internal_datanodeip(int index) const;
  std::string* _internal_add_datanodeip();
  public:

  // repeated int32 datanodeport = 6;
  int datanodeport_size() const;
  private:
  int _internal_datanodeport_size() const;
  public:
  void clear_datanodeport();
  private:
  int32_t _internal_datanodeport(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_datanodeport() const;
  void _internal_add_datanodeport(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_datanodeport();
  public:
  int32_t datanodeport(int index) const;
  void set_datanodeport(int index, int32_t value);
  void add_datanodeport(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      datanodeport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_datanodeport();

  // repeated string blockkeys = 7;
  int blockkeys_size() const;
  private:
  int _internal_blockkeys_size() const;
  public:
  void clear_blockkeys();
  const std::string& blockkeys(int index) const;
  std::string* mutable_blockkeys(int index);
  void set_blockkeys(int index, const std::string& value);
  void set_blockkeys(int index, std::string&& value);
  void set_blockkeys(int index, const char* value);
  void set_blockkeys(int index, const char* value, size_t size);
  std::string* add_blockkeys();
  void add_blockkeys(const std::string& value);
  void add_blockkeys(std::string&& value);
  void add_blockkeys(const char* value);
  void add_blockkeys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blockkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blockkeys();
  private:
  const std::string& _internal_blockkeys(int index) const;
  std::string* _internal_add_blockkeys();
  public:

  // repeated int32 blockids = 8;
  int blockids_size() const;
  private:
  int _internal_blockids_size() const;
  public:
  void clear_blockids();
  private:
  int32_t _internal_blockids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_blockids() const;
  void _internal_add_blockids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_blockids();
  public:
  int32_t blockids(int index) const;
  void set_blockids(int index, int32_t value);
  void add_blockids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      blockids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_blockids();

  // string clientip = 1;
  void clear_clientip();
  const std::string& clientip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientip();
  PROTOBUF_NODISCARD std::string* release_clientip();
  void set_allocated_clientip(std::string* clientip);
  private:
  const std::string& _internal_clientip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientip(const std::string& value);
  std::string* _internal_mutable_clientip();
  public:

  // string failed_block_key = 4;
  void clear_failed_block_key();
  const std::string& failed_block_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_failed_block_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_failed_block_key();
  PROTOBUF_NODISCARD std::string* release_failed_block_key();
  void set_allocated_failed_block_key(std::string* failed_block_key);
  private:
  const std::string& _internal_failed_block_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failed_block_key(const std::string& value);
  std::string* _internal_mutable_failed_block_key();
  public:

  // int32 clientport = 2;
  void clear_clientport();
  int32_t clientport() const;
  void set_clientport(int32_t value);
  private:
  int32_t _internal_clientport() const;
  void _internal_set_clientport(int32_t value);
  public:

  // int32 failed_block_id = 3;
  void clear_failed_block_id();
  int32_t failed_block_id() const;
  void set_failed_block_id(int32_t value);
  private:
  int32_t _internal_failed_block_id() const;
  void _internal_set_failed_block_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.DegradedReadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> datanodeip_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > datanodeport_;
    mutable std::atomic<int> _datanodeport_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blockkeys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > blockids_;
    mutable std::atomic<int> _blockids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failed_block_key_;
    int32_t clientport_;
    int32_t failed_block_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class RecoveryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.RecoveryRequest) */ {
 public:
  inline RecoveryRequest() : RecoveryRequest(nullptr) {}
  ~RecoveryRequest() override;
  explicit PROTOBUF_CONSTEXPR RecoveryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecoveryRequest(const RecoveryRequest& from);
  RecoveryRequest(RecoveryRequest&& from) noexcept
    : RecoveryRequest() {
    *this = ::std::move(from);
  }

  inline RecoveryRequest& operator=(const RecoveryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoveryRequest& operator=(RecoveryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecoveryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecoveryRequest* internal_default_instance() {
    return reinterpret_cast<const RecoveryRequest*>(
               &_RecoveryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RecoveryRequest& a, RecoveryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecoveryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecoveryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecoveryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecoveryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecoveryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecoveryRequest& from) {
    RecoveryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoveryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.RecoveryRequest";
  }
  protected:
  explicit RecoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatanodeipFieldNumber = 6,
    kDatanodeportFieldNumber = 7,
    kBlockkeysFieldNumber = 8,
    kBlockidsFieldNumber = 9,
    kReplacedNodeIpFieldNumber = 1,
    kFailedBlockKeyFieldNumber = 4,
    kReplacedNodePortFieldNumber = 2,
    kFailedBlockIdFieldNumber = 3,
    kCrossRackNumFieldNumber = 5,
  };
  // repeated string datanodeip = 6;
  int datanodeip_size() const;
  private:
  int _internal_datanodeip_size() const;
  public:
  void clear_datanodeip();
  const std::string& datanodeip(int index) const;
  std::string* mutable_datanodeip(int index);
  void set_datanodeip(int index, const std::string& value);
  void set_datanodeip(int index, std::string&& value);
  void set_datanodeip(int index, const char* value);
  void set_datanodeip(int index, const char* value, size_t size);
  std::string* add_datanodeip();
  void add_datanodeip(const std::string& value);
  void add_datanodeip(std::string&& value);
  void add_datanodeip(const char* value);
  void add_datanodeip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& datanodeip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_datanodeip();
  private:
  const std::string& _internal_datanodeip(int index) const;
  std::string* _internal_add_datanodeip();
  public:

  // repeated int32 datanodeport = 7;
  int datanodeport_size() const;
  private:
  int _internal_datanodeport_size() const;
  public:
  void clear_datanodeport();
  private:
  int32_t _internal_datanodeport(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_datanodeport() const;
  void _internal_add_datanodeport(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_datanodeport();
  public:
  int32_t datanodeport(int index) const;
  void set_datanodeport(int index, int32_t value);
  void add_datanodeport(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      datanodeport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_datanodeport();

  // repeated string blockkeys = 8;
  int blockkeys_size() const;
  private:
  int _internal_blockkeys_size() const;
  public:
  void clear_blockkeys();
  const std::string& blockkeys(int index) const;
  std::string* mutable_blockkeys(int index);
  void set_blockkeys(int index, const std::string& value);
  void set_blockkeys(int index, std::string&& value);
  void set_blockkeys(int index, const char* value);
  void set_blockkeys(int index, const char* value, size_t size);
  std::string* add_blockkeys();
  void add_blockkeys(const std::string& value);
  void add_blockkeys(std::string&& value);
  void add_blockkeys(const char* value);
  void add_blockkeys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blockkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blockkeys();
  private:
  const std::string& _internal_blockkeys(int index) const;
  std::string* _internal_add_blockkeys();
  public:

  // repeated int32 blockids = 9;
  int blockids_size() const;
  private:
  int _internal_blockids_size() const;
  public:
  void clear_blockids();
  private:
  int32_t _internal_blockids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_blockids() const;
  void _internal_add_blockids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_blockids();
  public:
  int32_t blockids(int index) const;
  void set_blockids(int index, int32_t value);
  void add_blockids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      blockids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_blockids();

  // string replaced_node_ip = 1;
  void clear_replaced_node_ip();
  const std::string& replaced_node_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_replaced_node_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_replaced_node_ip();
  PROTOBUF_NODISCARD std::string* release_replaced_node_ip();
  void set_allocated_replaced_node_ip(std::string* replaced_node_ip);
  private:
  const std::string& _internal_replaced_node_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_replaced_node_ip(const std::string& value);
  std::string* _internal_mutable_replaced_node_ip();
  public:

  // string failed_block_key = 4;
  void clear_failed_block_key();
  const std::string& failed_block_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_failed_block_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_failed_block_key();
  PROTOBUF_NODISCARD std::string* release_failed_block_key();
  void set_allocated_failed_block_key(std::string* failed_block_key);
  private:
  const std::string& _internal_failed_block_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failed_block_key(const std::string& value);
  std::string* _internal_mutable_failed_block_key();
  public:

  // int32 replaced_node_port = 2;
  void clear_replaced_node_port();
  int32_t replaced_node_port() const;
  void set_replaced_node_port(int32_t value);
  private:
  int32_t _internal_replaced_node_port() const;
  void _internal_set_replaced_node_port(int32_t value);
  public:

  // int32 failed_block_id = 3;
  void clear_failed_block_id();
  int32_t failed_block_id() const;
  void set_failed_block_id(int32_t value);
  private:
  int32_t _internal_failed_block_id() const;
  void _internal_set_failed_block_id(int32_t value);
  public:

  // int32 cross_rack_num = 5;
  void clear_cross_rack_num();
  int32_t cross_rack_num() const;
  void set_cross_rack_num(int32_t value);
  private:
  int32_t _internal_cross_rack_num() const;
  void _internal_set_cross_rack_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.RecoveryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> datanodeip_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > datanodeport_;
    mutable std::atomic<int> _datanodeport_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blockkeys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > blockids_;
    mutable std::atomic<int> _blockids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replaced_node_ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failed_block_key_;
    int32_t replaced_node_port_;
    int32_t failed_block_id_;
    int32_t cross_rack_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class AppendStripeDataPlacement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.AppendStripeDataPlacement) */ {
 public:
  inline AppendStripeDataPlacement() : AppendStripeDataPlacement(nullptr) {}
  ~AppendStripeDataPlacement() override;
  explicit PROTOBUF_CONSTEXPR AppendStripeDataPlacement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendStripeDataPlacement(const AppendStripeDataPlacement& from);
  AppendStripeDataPlacement(AppendStripeDataPlacement&& from) noexcept
    : AppendStripeDataPlacement() {
    *this = ::std::move(from);
  }

  inline AppendStripeDataPlacement& operator=(const AppendStripeDataPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendStripeDataPlacement& operator=(AppendStripeDataPlacement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendStripeDataPlacement& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendStripeDataPlacement* internal_default_instance() {
    return reinterpret_cast<const AppendStripeDataPlacement*>(
               &_AppendStripeDataPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AppendStripeDataPlacement& a, AppendStripeDataPlacement& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendStripeDataPlacement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendStripeDataPlacement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendStripeDataPlacement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendStripeDataPlacement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendStripeDataPlacement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendStripeDataPlacement& from) {
    AppendStripeDataPlacement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendStripeDataPlacement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.AppendStripeDataPlacement";
  }
  protected:
  explicit AppendStripeDataPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatanodeipFieldNumber = 5,
    kDatanodeportFieldNumber = 6,
    kBlockkeysFieldNumber = 7,
    kBlockidsFieldNumber = 8,
    kOffsetsFieldNumber = 9,
    kSizesFieldNumber = 10,
    kKeyFieldNumber = 1,
    kAppendModeFieldNumber = 12,
    kClusterIdFieldNumber = 2,
    kStripeIdFieldNumber = 3,
    kAppendSizeFieldNumber = 4,
    kIsMergeParityFieldNumber = 11,
    kIsSerializedFieldNumber = 13,
  };
  // repeated string datanodeip = 5;
  int datanodeip_size() const;
  private:
  int _internal_datanodeip_size() const;
  public:
  void clear_datanodeip();
  const std::string& datanodeip(int index) const;
  std::string* mutable_datanodeip(int index);
  void set_datanodeip(int index, const std::string& value);
  void set_datanodeip(int index, std::string&& value);
  void set_datanodeip(int index, const char* value);
  void set_datanodeip(int index, const char* value, size_t size);
  std::string* add_datanodeip();
  void add_datanodeip(const std::string& value);
  void add_datanodeip(std::string&& value);
  void add_datanodeip(const char* value);
  void add_datanodeip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& datanodeip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_datanodeip();
  private:
  const std::string& _internal_datanodeip(int index) const;
  std::string* _internal_add_datanodeip();
  public:

  // repeated int32 datanodeport = 6;
  int datanodeport_size() const;
  private:
  int _internal_datanodeport_size() const;
  public:
  void clear_datanodeport();
  private:
  int32_t _internal_datanodeport(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_datanodeport() const;
  void _internal_add_datanodeport(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_datanodeport();
  public:
  int32_t datanodeport(int index) const;
  void set_datanodeport(int index, int32_t value);
  void add_datanodeport(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      datanodeport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_datanodeport();

  // repeated string blockkeys = 7;
  int blockkeys_size() const;
  private:
  int _internal_blockkeys_size() const;
  public:
  void clear_blockkeys();
  const std::string& blockkeys(int index) const;
  std::string* mutable_blockkeys(int index);
  void set_blockkeys(int index, const std::string& value);
  void set_blockkeys(int index, std::string&& value);
  void set_blockkeys(int index, const char* value);
  void set_blockkeys(int index, const char* value, size_t size);
  std::string* add_blockkeys();
  void add_blockkeys(const std::string& value);
  void add_blockkeys(std::string&& value);
  void add_blockkeys(const char* value);
  void add_blockkeys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blockkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blockkeys();
  private:
  const std::string& _internal_blockkeys(int index) const;
  std::string* _internal_add_blockkeys();
  public:

  // repeated int32 blockids = 8;
  int blockids_size() const;
  private:
  int _internal_blockids_size() const;
  public:
  void clear_blockids();
  private:
  int32_t _internal_blockids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_blockids() const;
  void _internal_add_blockids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_blockids();
  public:
  int32_t blockids(int index) const;
  void set_blockids(int index, int32_t value);
  void add_blockids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      blockids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_blockids();

  // repeated int32 offsets = 9;
  int offsets_size() const;
  private:
  int _internal_offsets_size() const;
  public:
  void clear_offsets();
  private:
  int32_t _internal_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_offsets() const;
  void _internal_add_offsets(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_offsets();
  public:
  int32_t offsets(int index) const;
  void set_offsets(int index, int32_t value);
  void add_offsets(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_offsets();

  // repeated int32 sizes = 10;
  int sizes_size() const;
  private:
  int _internal_sizes_size() const;
  public:
  void clear_sizes();
  private:
  int32_t _internal_sizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_sizes() const;
  void _internal_add_sizes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_sizes();
  public:
  int32_t sizes(int index) const;
  void set_sizes(int index, int32_t value);
  void add_sizes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_sizes();

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string append_mode = 12;
  void clear_append_mode();
  const std::string& append_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_append_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_append_mode();
  PROTOBUF_NODISCARD std::string* release_append_mode();
  void set_allocated_append_mode(std::string* append_mode);
  private:
  const std::string& _internal_append_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_append_mode(const std::string& value);
  std::string* _internal_mutable_append_mode();
  public:

  // int32 cluster_id = 2;
  void clear_cluster_id();
  int32_t cluster_id() const;
  void set_cluster_id(int32_t value);
  private:
  int32_t _internal_cluster_id() const;
  void _internal_set_cluster_id(int32_t value);
  public:

  // int32 stripe_id = 3;
  void clear_stripe_id();
  int32_t stripe_id() const;
  void set_stripe_id(int32_t value);
  private:
  int32_t _internal_stripe_id() const;
  void _internal_set_stripe_id(int32_t value);
  public:

  // int32 append_size = 4;
  void clear_append_size();
  int32_t append_size() const;
  void set_append_size(int32_t value);
  private:
  int32_t _internal_append_size() const;
  void _internal_set_append_size(int32_t value);
  public:

  // bool is_merge_parity = 11;
  void clear_is_merge_parity();
  bool is_merge_parity() const;
  void set_is_merge_parity(bool value);
  private:
  bool _internal_is_merge_parity() const;
  void _internal_set_is_merge_parity(bool value);
  public:

  // bool is_serialized = 13;
  void clear_is_serialized();
  bool is_serialized() const;
  void set_is_serialized(bool value);
  private:
  bool _internal_is_serialized() const;
  void _internal_set_is_serialized(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.AppendStripeDataPlacement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> datanodeip_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > datanodeport_;
    mutable std::atomic<int> _datanodeport_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blockkeys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > blockids_;
    mutable std::atomic<int> _blockids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > offsets_;
    mutable std::atomic<int> _offsets_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > sizes_;
    mutable std::atomic<int> _sizes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr append_mode_;
    int32_t cluster_id_;
    int32_t stripe_id_;
    int32_t append_size_;
    bool is_merge_parity_;
    bool is_serialized_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class SetReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.SetReply) */ {
 public:
  inline SetReply() : SetReply(nullptr) {}
  ~SetReply() override;
  explicit PROTOBUF_CONSTEXPR SetReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetReply(const SetReply& from);
  SetReply(SetReply&& from) noexcept
    : SetReply() {
    *this = ::std::move(from);
  }

  inline SetReply& operator=(const SetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReply& operator=(SetReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetReply* internal_default_instance() {
    return reinterpret_cast<const SetReply*>(
               &_SetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetReply& a, SetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SetReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetReply& from) {
    SetReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.SetReply";
  }
  protected:
  explicit SetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfcommitFieldNumber = 1,
  };
  // bool ifcommit = 1;
  void clear_ifcommit();
  bool ifcommit() const;
  void set_ifcommit(bool value);
  private:
  bool _internal_ifcommit() const;
  void _internal_set_ifcommit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.SetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ifcommit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class GetReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.GetReply) */ {
 public:
  inline GetReply() : GetReply(nullptr) {}
  ~GetReply() override;
  explicit PROTOBUF_CONSTEXPR GetReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReply(const GetReply& from);
  GetReply(GetReply&& from) noexcept
    : GetReply() {
    *this = ::std::move(from);
  }

  inline GetReply& operator=(const GetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReply& operator=(GetReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReply* internal_default_instance() {
    return reinterpret_cast<const GetReply*>(
               &_GetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetReply& a, GetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetReply& from) {
    GetReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.GetReply";
  }
  protected:
  explicit GetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetsuccessFieldNumber = 1,
  };
  // bool getsuccess = 1;
  void clear_getsuccess();
  bool getsuccess() const;
  void set_getsuccess(bool value);
  private:
  bool _internal_getsuccess() const;
  void _internal_set_getsuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.GetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool getsuccess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// -------------------------------------------------------------------

class StripeAndBlockIDs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proxy_proto.StripeAndBlockIDs) */ {
 public:
  inline StripeAndBlockIDs() : StripeAndBlockIDs(nullptr) {}
  ~StripeAndBlockIDs() override;
  explicit PROTOBUF_CONSTEXPR StripeAndBlockIDs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StripeAndBlockIDs(const StripeAndBlockIDs& from);
  StripeAndBlockIDs(StripeAndBlockIDs&& from) noexcept
    : StripeAndBlockIDs() {
    *this = ::std::move(from);
  }

  inline StripeAndBlockIDs& operator=(const StripeAndBlockIDs& from) {
    CopyFrom(from);
    return *this;
  }
  inline StripeAndBlockIDs& operator=(StripeAndBlockIDs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StripeAndBlockIDs& default_instance() {
    return *internal_default_instance();
  }
  static inline const StripeAndBlockIDs* internal_default_instance() {
    return reinterpret_cast<const StripeAndBlockIDs*>(
               &_StripeAndBlockIDs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StripeAndBlockIDs& a, StripeAndBlockIDs& b) {
    a.Swap(&b);
  }
  inline void Swap(StripeAndBlockIDs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StripeAndBlockIDs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StripeAndBlockIDs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StripeAndBlockIDs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StripeAndBlockIDs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StripeAndBlockIDs& from) {
    StripeAndBlockIDs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StripeAndBlockIDs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proxy_proto.StripeAndBlockIDs";
  }
  protected:
  explicit StripeAndBlockIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdsFieldNumber = 5,
    kBlockKeysFieldNumber = 6,
    kDatanodeipsFieldNumber = 7,
    kDatanodeportsFieldNumber = 8,
    kClientipFieldNumber = 3,
    kStripeIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kClientportFieldNumber = 4,
  };
  // repeated int32 block_ids = 5;
  int block_ids_size() const;
  private:
  int _internal_block_ids_size() const;
  public:
  void clear_block_ids();
  private:
  int32_t _internal_block_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_block_ids() const;
  void _internal_add_block_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_block_ids();
  public:
  int32_t block_ids(int index) const;
  void set_block_ids(int index, int32_t value);
  void add_block_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      block_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_block_ids();

  // repeated string block_keys = 6;
  int block_keys_size() const;
  private:
  int _internal_block_keys_size() const;
  public:
  void clear_block_keys();
  const std::string& block_keys(int index) const;
  std::string* mutable_block_keys(int index);
  void set_block_keys(int index, const std::string& value);
  void set_block_keys(int index, std::string&& value);
  void set_block_keys(int index, const char* value);
  void set_block_keys(int index, const char* value, size_t size);
  std::string* add_block_keys();
  void add_block_keys(const std::string& value);
  void add_block_keys(std::string&& value);
  void add_block_keys(const char* value);
  void add_block_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& block_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_block_keys();
  private:
  const std::string& _internal_block_keys(int index) const;
  std::string* _internal_add_block_keys();
  public:

  // repeated string datanodeips = 7;
  int datanodeips_size() const;
  private:
  int _internal_datanodeips_size() const;
  public:
  void clear_datanodeips();
  const std::string& datanodeips(int index) const;
  std::string* mutable_datanodeips(int index);
  void set_datanodeips(int index, const std::string& value);
  void set_datanodeips(int index, std::string&& value);
  void set_datanodeips(int index, const char* value);
  void set_datanodeips(int index, const char* value, size_t size);
  std::string* add_datanodeips();
  void add_datanodeips(const std::string& value);
  void add_datanodeips(std::string&& value);
  void add_datanodeips(const char* value);
  void add_datanodeips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& datanodeips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_datanodeips();
  private:
  const std::string& _internal_datanodeips(int index) const;
  std::string* _internal_add_datanodeips();
  public:

  // repeated int32 datanodeports = 8;
  int datanodeports_size() const;
  private:
  int _internal_datanodeports_size() const;
  public:
  void clear_datanodeports();
  private:
  int32_t _internal_datanodeports(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_datanodeports() const;
  void _internal_add_datanodeports(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_datanodeports();
  public:
  int32_t datanodeports(int index) const;
  void set_datanodeports(int index, int32_t value);
  void add_datanodeports(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      datanodeports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_datanodeports();

  // string clientip = 3;
  void clear_clientip();
  const std::string& clientip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientip();
  PROTOBUF_NODISCARD std::string* release_clientip();
  void set_allocated_clientip(std::string* clientip);
  private:
  const std::string& _internal_clientip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientip(const std::string& value);
  std::string* _internal_mutable_clientip();
  public:

  // int32 stripe_id = 1;
  void clear_stripe_id();
  int32_t stripe_id() const;
  void set_stripe_id(int32_t value);
  private:
  int32_t _internal_stripe_id() const;
  void _internal_set_stripe_id(int32_t value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // int32 clientport = 4;
  void clear_clientport();
  int32_t clientport() const;
  void set_clientport(int32_t value);
  private:
  int32_t _internal_clientport() const;
  void _internal_set_clientport(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proxy_proto.StripeAndBlockIDs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > block_ids_;
    mutable std::atomic<int> _block_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> block_keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> datanodeips_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > datanodeports_;
    mutable std::atomic<int> _datanodeports_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientip_;
    int32_t stripe_id_;
    int32_t group_id_;
    int32_t clientport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proxy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// locationInfo

// int32 cluster_id = 1;
inline void locationInfo::clear_cluster_id() {
  _impl_.cluster_id_ = 0;
}
inline int32_t locationInfo::_internal_cluster_id() const {
  return _impl_.cluster_id_;
}
inline int32_t locationInfo::cluster_id() const {
  // @@protoc_insertion_point(field_get:proxy_proto.locationInfo.cluster_id)
  return _internal_cluster_id();
}
inline void locationInfo::_internal_set_cluster_id(int32_t value) {
  
  _impl_.cluster_id_ = value;
}
inline void locationInfo::set_cluster_id(int32_t value) {
  _internal_set_cluster_id(value);
  // @@protoc_insertion_point(field_set:proxy_proto.locationInfo.cluster_id)
}

// string proxy_ip = 2;
inline void locationInfo::clear_proxy_ip() {
  _impl_.proxy_ip_.ClearToEmpty();
}
inline const std::string& locationInfo::proxy_ip() const {
  // @@protoc_insertion_point(field_get:proxy_proto.locationInfo.proxy_ip)
  return _internal_proxy_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void locationInfo::set_proxy_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proxy_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.locationInfo.proxy_ip)
}
inline std::string* locationInfo::mutable_proxy_ip() {
  std::string* _s = _internal_mutable_proxy_ip();
  // @@protoc_insertion_point(field_mutable:proxy_proto.locationInfo.proxy_ip)
  return _s;
}
inline const std::string& locationInfo::_internal_proxy_ip() const {
  return _impl_.proxy_ip_.Get();
}
inline void locationInfo::_internal_set_proxy_ip(const std::string& value) {
  
  _impl_.proxy_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* locationInfo::_internal_mutable_proxy_ip() {
  
  return _impl_.proxy_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* locationInfo::release_proxy_ip() {
  // @@protoc_insertion_point(field_release:proxy_proto.locationInfo.proxy_ip)
  return _impl_.proxy_ip_.Release();
}
inline void locationInfo::set_allocated_proxy_ip(std::string* proxy_ip) {
  if (proxy_ip != nullptr) {
    
  } else {
    
  }
  _impl_.proxy_ip_.SetAllocated(proxy_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proxy_ip_.IsDefault()) {
    _impl_.proxy_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.locationInfo.proxy_ip)
}

// int32 proxy_port = 3;
inline void locationInfo::clear_proxy_port() {
  _impl_.proxy_port_ = 0;
}
inline int32_t locationInfo::_internal_proxy_port() const {
  return _impl_.proxy_port_;
}
inline int32_t locationInfo::proxy_port() const {
  // @@protoc_insertion_point(field_get:proxy_proto.locationInfo.proxy_port)
  return _internal_proxy_port();
}
inline void locationInfo::_internal_set_proxy_port(int32_t value) {
  
  _impl_.proxy_port_ = value;
}
inline void locationInfo::set_proxy_port(int32_t value) {
  _internal_set_proxy_port(value);
  // @@protoc_insertion_point(field_set:proxy_proto.locationInfo.proxy_port)
}

// repeated string datanodeip = 4;
inline int locationInfo::_internal_datanodeip_size() const {
  return _impl_.datanodeip_.size();
}
inline int locationInfo::datanodeip_size() const {
  return _internal_datanodeip_size();
}
inline void locationInfo::clear_datanodeip() {
  _impl_.datanodeip_.Clear();
}
inline std::string* locationInfo::add_datanodeip() {
  std::string* _s = _internal_add_datanodeip();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.locationInfo.datanodeip)
  return _s;
}
inline const std::string& locationInfo::_internal_datanodeip(int index) const {
  return _impl_.datanodeip_.Get(index);
}
inline const std::string& locationInfo::datanodeip(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.locationInfo.datanodeip)
  return _internal_datanodeip(index);
}
inline std::string* locationInfo::mutable_datanodeip(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.locationInfo.datanodeip)
  return _impl_.datanodeip_.Mutable(index);
}
inline void locationInfo::set_datanodeip(int index, const std::string& value) {
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.locationInfo.datanodeip)
}
inline void locationInfo::set_datanodeip(int index, std::string&& value) {
  _impl_.datanodeip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.locationInfo.datanodeip)
}
inline void locationInfo::set_datanodeip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.locationInfo.datanodeip)
}
inline void locationInfo::set_datanodeip(int index, const char* value, size_t size) {
  _impl_.datanodeip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.locationInfo.datanodeip)
}
inline std::string* locationInfo::_internal_add_datanodeip() {
  return _impl_.datanodeip_.Add();
}
inline void locationInfo::add_datanodeip(const std::string& value) {
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.locationInfo.datanodeip)
}
inline void locationInfo::add_datanodeip(std::string&& value) {
  _impl_.datanodeip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.locationInfo.datanodeip)
}
inline void locationInfo::add_datanodeip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.locationInfo.datanodeip)
}
inline void locationInfo::add_datanodeip(const char* value, size_t size) {
  _impl_.datanodeip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.locationInfo.datanodeip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
locationInfo::datanodeip() const {
  // @@protoc_insertion_point(field_list:proxy_proto.locationInfo.datanodeip)
  return _impl_.datanodeip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
locationInfo::mutable_datanodeip() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.locationInfo.datanodeip)
  return &_impl_.datanodeip_;
}

// repeated int32 datanodeport = 5;
inline int locationInfo::_internal_datanodeport_size() const {
  return _impl_.datanodeport_.size();
}
inline int locationInfo::datanodeport_size() const {
  return _internal_datanodeport_size();
}
inline void locationInfo::clear_datanodeport() {
  _impl_.datanodeport_.Clear();
}
inline int32_t locationInfo::_internal_datanodeport(int index) const {
  return _impl_.datanodeport_.Get(index);
}
inline int32_t locationInfo::datanodeport(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.locationInfo.datanodeport)
  return _internal_datanodeport(index);
}
inline void locationInfo::set_datanodeport(int index, int32_t value) {
  _impl_.datanodeport_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.locationInfo.datanodeport)
}
inline void locationInfo::_internal_add_datanodeport(int32_t value) {
  _impl_.datanodeport_.Add(value);
}
inline void locationInfo::add_datanodeport(int32_t value) {
  _internal_add_datanodeport(value);
  // @@protoc_insertion_point(field_add:proxy_proto.locationInfo.datanodeport)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
locationInfo::_internal_datanodeport() const {
  return _impl_.datanodeport_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
locationInfo::datanodeport() const {
  // @@protoc_insertion_point(field_list:proxy_proto.locationInfo.datanodeport)
  return _internal_datanodeport();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
locationInfo::_internal_mutable_datanodeport() {
  return &_impl_.datanodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
locationInfo::mutable_datanodeport() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.locationInfo.datanodeport)
  return _internal_mutable_datanodeport();
}

// repeated string blockkeys = 6;
inline int locationInfo::_internal_blockkeys_size() const {
  return _impl_.blockkeys_.size();
}
inline int locationInfo::blockkeys_size() const {
  return _internal_blockkeys_size();
}
inline void locationInfo::clear_blockkeys() {
  _impl_.blockkeys_.Clear();
}
inline std::string* locationInfo::add_blockkeys() {
  std::string* _s = _internal_add_blockkeys();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.locationInfo.blockkeys)
  return _s;
}
inline const std::string& locationInfo::_internal_blockkeys(int index) const {
  return _impl_.blockkeys_.Get(index);
}
inline const std::string& locationInfo::blockkeys(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.locationInfo.blockkeys)
  return _internal_blockkeys(index);
}
inline std::string* locationInfo::mutable_blockkeys(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.locationInfo.blockkeys)
  return _impl_.blockkeys_.Mutable(index);
}
inline void locationInfo::set_blockkeys(int index, const std::string& value) {
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.locationInfo.blockkeys)
}
inline void locationInfo::set_blockkeys(int index, std::string&& value) {
  _impl_.blockkeys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.locationInfo.blockkeys)
}
inline void locationInfo::set_blockkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.locationInfo.blockkeys)
}
inline void locationInfo::set_blockkeys(int index, const char* value, size_t size) {
  _impl_.blockkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.locationInfo.blockkeys)
}
inline std::string* locationInfo::_internal_add_blockkeys() {
  return _impl_.blockkeys_.Add();
}
inline void locationInfo::add_blockkeys(const std::string& value) {
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.locationInfo.blockkeys)
}
inline void locationInfo::add_blockkeys(std::string&& value) {
  _impl_.blockkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.locationInfo.blockkeys)
}
inline void locationInfo::add_blockkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.locationInfo.blockkeys)
}
inline void locationInfo::add_blockkeys(const char* value, size_t size) {
  _impl_.blockkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.locationInfo.blockkeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
locationInfo::blockkeys() const {
  // @@protoc_insertion_point(field_list:proxy_proto.locationInfo.blockkeys)
  return _impl_.blockkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
locationInfo::mutable_blockkeys() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.locationInfo.blockkeys)
  return &_impl_.blockkeys_;
}

// repeated int32 blockids = 7;
inline int locationInfo::_internal_blockids_size() const {
  return _impl_.blockids_.size();
}
inline int locationInfo::blockids_size() const {
  return _internal_blockids_size();
}
inline void locationInfo::clear_blockids() {
  _impl_.blockids_.Clear();
}
inline int32_t locationInfo::_internal_blockids(int index) const {
  return _impl_.blockids_.Get(index);
}
inline int32_t locationInfo::blockids(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.locationInfo.blockids)
  return _internal_blockids(index);
}
inline void locationInfo::set_blockids(int index, int32_t value) {
  _impl_.blockids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.locationInfo.blockids)
}
inline void locationInfo::_internal_add_blockids(int32_t value) {
  _impl_.blockids_.Add(value);
}
inline void locationInfo::add_blockids(int32_t value) {
  _internal_add_blockids(value);
  // @@protoc_insertion_point(field_add:proxy_proto.locationInfo.blockids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
locationInfo::_internal_blockids() const {
  return _impl_.blockids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
locationInfo::blockids() const {
  // @@protoc_insertion_point(field_list:proxy_proto.locationInfo.blockids)
  return _internal_blockids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
locationInfo::_internal_mutable_blockids() {
  return &_impl_.blockids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
locationInfo::mutable_blockids() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.locationInfo.blockids)
  return _internal_mutable_blockids();
}

// -------------------------------------------------------------------

// mainRecalPlan

// bool type = 1;
inline void mainRecalPlan::clear_type() {
  _impl_.type_ = false;
}
inline bool mainRecalPlan::_internal_type() const {
  return _impl_.type_;
}
inline bool mainRecalPlan::type() const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.type)
  return _internal_type();
}
inline void mainRecalPlan::_internal_set_type(bool value) {
  
  _impl_.type_ = value;
}
inline void mainRecalPlan::set_type(bool value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.type)
}

// bool if_partial_decoding = 2;
inline void mainRecalPlan::clear_if_partial_decoding() {
  _impl_.if_partial_decoding_ = false;
}
inline bool mainRecalPlan::_internal_if_partial_decoding() const {
  return _impl_.if_partial_decoding_;
}
inline bool mainRecalPlan::if_partial_decoding() const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.if_partial_decoding)
  return _internal_if_partial_decoding();
}
inline void mainRecalPlan::_internal_set_if_partial_decoding(bool value) {
  
  _impl_.if_partial_decoding_ = value;
}
inline void mainRecalPlan::set_if_partial_decoding(bool value) {
  _internal_set_if_partial_decoding(value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.if_partial_decoding)
}

// repeated .proxy_proto.locationInfo clusters = 3;
inline int mainRecalPlan::_internal_clusters_size() const {
  return _impl_.clusters_.size();
}
inline int mainRecalPlan::clusters_size() const {
  return _internal_clusters_size();
}
inline void mainRecalPlan::clear_clusters() {
  _impl_.clusters_.Clear();
}
inline ::proxy_proto::locationInfo* mainRecalPlan::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.mainRecalPlan.clusters)
  return _impl_.clusters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proxy_proto::locationInfo >*
mainRecalPlan::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.mainRecalPlan.clusters)
  return &_impl_.clusters_;
}
inline const ::proxy_proto::locationInfo& mainRecalPlan::_internal_clusters(int index) const {
  return _impl_.clusters_.Get(index);
}
inline const ::proxy_proto::locationInfo& mainRecalPlan::clusters(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.clusters)
  return _internal_clusters(index);
}
inline ::proxy_proto::locationInfo* mainRecalPlan::_internal_add_clusters() {
  return _impl_.clusters_.Add();
}
inline ::proxy_proto::locationInfo* mainRecalPlan::add_clusters() {
  ::proxy_proto::locationInfo* _add = _internal_add_clusters();
  // @@protoc_insertion_point(field_add:proxy_proto.mainRecalPlan.clusters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proxy_proto::locationInfo >&
mainRecalPlan::clusters() const {
  // @@protoc_insertion_point(field_list:proxy_proto.mainRecalPlan.clusters)
  return _impl_.clusters_;
}

// repeated string p_datanodeip = 4;
inline int mainRecalPlan::_internal_p_datanodeip_size() const {
  return _impl_.p_datanodeip_.size();
}
inline int mainRecalPlan::p_datanodeip_size() const {
  return _internal_p_datanodeip_size();
}
inline void mainRecalPlan::clear_p_datanodeip() {
  _impl_.p_datanodeip_.Clear();
}
inline std::string* mainRecalPlan::add_p_datanodeip() {
  std::string* _s = _internal_add_p_datanodeip();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.mainRecalPlan.p_datanodeip)
  return _s;
}
inline const std::string& mainRecalPlan::_internal_p_datanodeip(int index) const {
  return _impl_.p_datanodeip_.Get(index);
}
inline const std::string& mainRecalPlan::p_datanodeip(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.p_datanodeip)
  return _internal_p_datanodeip(index);
}
inline std::string* mainRecalPlan::mutable_p_datanodeip(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.mainRecalPlan.p_datanodeip)
  return _impl_.p_datanodeip_.Mutable(index);
}
inline void mainRecalPlan::set_p_datanodeip(int index, const std::string& value) {
  _impl_.p_datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.p_datanodeip)
}
inline void mainRecalPlan::set_p_datanodeip(int index, std::string&& value) {
  _impl_.p_datanodeip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.p_datanodeip)
}
inline void mainRecalPlan::set_p_datanodeip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.p_datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.mainRecalPlan.p_datanodeip)
}
inline void mainRecalPlan::set_p_datanodeip(int index, const char* value, size_t size) {
  _impl_.p_datanodeip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.mainRecalPlan.p_datanodeip)
}
inline std::string* mainRecalPlan::_internal_add_p_datanodeip() {
  return _impl_.p_datanodeip_.Add();
}
inline void mainRecalPlan::add_p_datanodeip(const std::string& value) {
  _impl_.p_datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.mainRecalPlan.p_datanodeip)
}
inline void mainRecalPlan::add_p_datanodeip(std::string&& value) {
  _impl_.p_datanodeip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.mainRecalPlan.p_datanodeip)
}
inline void mainRecalPlan::add_p_datanodeip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.p_datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.mainRecalPlan.p_datanodeip)
}
inline void mainRecalPlan::add_p_datanodeip(const char* value, size_t size) {
  _impl_.p_datanodeip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.mainRecalPlan.p_datanodeip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
mainRecalPlan::p_datanodeip() const {
  // @@protoc_insertion_point(field_list:proxy_proto.mainRecalPlan.p_datanodeip)
  return _impl_.p_datanodeip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
mainRecalPlan::mutable_p_datanodeip() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.mainRecalPlan.p_datanodeip)
  return &_impl_.p_datanodeip_;
}

// repeated int32 p_datanodeport = 5;
inline int mainRecalPlan::_internal_p_datanodeport_size() const {
  return _impl_.p_datanodeport_.size();
}
inline int mainRecalPlan::p_datanodeport_size() const {
  return _internal_p_datanodeport_size();
}
inline void mainRecalPlan::clear_p_datanodeport() {
  _impl_.p_datanodeport_.Clear();
}
inline int32_t mainRecalPlan::_internal_p_datanodeport(int index) const {
  return _impl_.p_datanodeport_.Get(index);
}
inline int32_t mainRecalPlan::p_datanodeport(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.p_datanodeport)
  return _internal_p_datanodeport(index);
}
inline void mainRecalPlan::set_p_datanodeport(int index, int32_t value) {
  _impl_.p_datanodeport_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.p_datanodeport)
}
inline void mainRecalPlan::_internal_add_p_datanodeport(int32_t value) {
  _impl_.p_datanodeport_.Add(value);
}
inline void mainRecalPlan::add_p_datanodeport(int32_t value) {
  _internal_add_p_datanodeport(value);
  // @@protoc_insertion_point(field_add:proxy_proto.mainRecalPlan.p_datanodeport)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
mainRecalPlan::_internal_p_datanodeport() const {
  return _impl_.p_datanodeport_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
mainRecalPlan::p_datanodeport() const {
  // @@protoc_insertion_point(field_list:proxy_proto.mainRecalPlan.p_datanodeport)
  return _internal_p_datanodeport();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
mainRecalPlan::_internal_mutable_p_datanodeport() {
  return &_impl_.p_datanodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
mainRecalPlan::mutable_p_datanodeport() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.mainRecalPlan.p_datanodeport)
  return _internal_mutable_p_datanodeport();
}

// repeated string p_blockkeys = 6;
inline int mainRecalPlan::_internal_p_blockkeys_size() const {
  return _impl_.p_blockkeys_.size();
}
inline int mainRecalPlan::p_blockkeys_size() const {
  return _internal_p_blockkeys_size();
}
inline void mainRecalPlan::clear_p_blockkeys() {
  _impl_.p_blockkeys_.Clear();
}
inline std::string* mainRecalPlan::add_p_blockkeys() {
  std::string* _s = _internal_add_p_blockkeys();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.mainRecalPlan.p_blockkeys)
  return _s;
}
inline const std::string& mainRecalPlan::_internal_p_blockkeys(int index) const {
  return _impl_.p_blockkeys_.Get(index);
}
inline const std::string& mainRecalPlan::p_blockkeys(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.p_blockkeys)
  return _internal_p_blockkeys(index);
}
inline std::string* mainRecalPlan::mutable_p_blockkeys(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.mainRecalPlan.p_blockkeys)
  return _impl_.p_blockkeys_.Mutable(index);
}
inline void mainRecalPlan::set_p_blockkeys(int index, const std::string& value) {
  _impl_.p_blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.p_blockkeys)
}
inline void mainRecalPlan::set_p_blockkeys(int index, std::string&& value) {
  _impl_.p_blockkeys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.p_blockkeys)
}
inline void mainRecalPlan::set_p_blockkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.p_blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.mainRecalPlan.p_blockkeys)
}
inline void mainRecalPlan::set_p_blockkeys(int index, const char* value, size_t size) {
  _impl_.p_blockkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.mainRecalPlan.p_blockkeys)
}
inline std::string* mainRecalPlan::_internal_add_p_blockkeys() {
  return _impl_.p_blockkeys_.Add();
}
inline void mainRecalPlan::add_p_blockkeys(const std::string& value) {
  _impl_.p_blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.mainRecalPlan.p_blockkeys)
}
inline void mainRecalPlan::add_p_blockkeys(std::string&& value) {
  _impl_.p_blockkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.mainRecalPlan.p_blockkeys)
}
inline void mainRecalPlan::add_p_blockkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.p_blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.mainRecalPlan.p_blockkeys)
}
inline void mainRecalPlan::add_p_blockkeys(const char* value, size_t size) {
  _impl_.p_blockkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.mainRecalPlan.p_blockkeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
mainRecalPlan::p_blockkeys() const {
  // @@protoc_insertion_point(field_list:proxy_proto.mainRecalPlan.p_blockkeys)
  return _impl_.p_blockkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
mainRecalPlan::mutable_p_blockkeys() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.mainRecalPlan.p_blockkeys)
  return &_impl_.p_blockkeys_;
}

// int32 k = 7;
inline void mainRecalPlan::clear_k() {
  _impl_.k_ = 0;
}
inline int32_t mainRecalPlan::_internal_k() const {
  return _impl_.k_;
}
inline int32_t mainRecalPlan::k() const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.k)
  return _internal_k();
}
inline void mainRecalPlan::_internal_set_k(int32_t value) {
  
  _impl_.k_ = value;
}
inline void mainRecalPlan::set_k(int32_t value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.k)
}

// int32 l = 8;
inline void mainRecalPlan::clear_l() {
  _impl_.l_ = 0;
}
inline int32_t mainRecalPlan::_internal_l() const {
  return _impl_.l_;
}
inline int32_t mainRecalPlan::l() const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.l)
  return _internal_l();
}
inline void mainRecalPlan::_internal_set_l(int32_t value) {
  
  _impl_.l_ = value;
}
inline void mainRecalPlan::set_l(int32_t value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.l)
}

// int32 g_m = 9;
inline void mainRecalPlan::clear_g_m() {
  _impl_.g_m_ = 0;
}
inline int32_t mainRecalPlan::_internal_g_m() const {
  return _impl_.g_m_;
}
inline int32_t mainRecalPlan::g_m() const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.g_m)
  return _internal_g_m();
}
inline void mainRecalPlan::_internal_set_g_m(int32_t value) {
  
  _impl_.g_m_ = value;
}
inline void mainRecalPlan::set_g_m(int32_t value) {
  _internal_set_g_m(value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.g_m)
}

// int32 block_size = 10;
inline void mainRecalPlan::clear_block_size() {
  _impl_.block_size_ = 0;
}
inline int32_t mainRecalPlan::_internal_block_size() const {
  return _impl_.block_size_;
}
inline int32_t mainRecalPlan::block_size() const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.block_size)
  return _internal_block_size();
}
inline void mainRecalPlan::_internal_set_block_size(int32_t value) {
  
  _impl_.block_size_ = value;
}
inline void mainRecalPlan::set_block_size(int32_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.block_size)
}

// int32 encodetype = 11;
inline void mainRecalPlan::clear_encodetype() {
  _impl_.encodetype_ = 0;
}
inline int32_t mainRecalPlan::_internal_encodetype() const {
  return _impl_.encodetype_;
}
inline int32_t mainRecalPlan::encodetype() const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.encodetype)
  return _internal_encodetype();
}
inline void mainRecalPlan::_internal_set_encodetype(int32_t value) {
  
  _impl_.encodetype_ = value;
}
inline void mainRecalPlan::set_encodetype(int32_t value) {
  _internal_set_encodetype(value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.encodetype)
}

// int32 stripe_id = 12;
inline void mainRecalPlan::clear_stripe_id() {
  _impl_.stripe_id_ = 0;
}
inline int32_t mainRecalPlan::_internal_stripe_id() const {
  return _impl_.stripe_id_;
}
inline int32_t mainRecalPlan::stripe_id() const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.stripe_id)
  return _internal_stripe_id();
}
inline void mainRecalPlan::_internal_set_stripe_id(int32_t value) {
  
  _impl_.stripe_id_ = value;
}
inline void mainRecalPlan::set_stripe_id(int32_t value) {
  _internal_set_stripe_id(value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.stripe_id)
}

// int32 group_id = 13;
inline void mainRecalPlan::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t mainRecalPlan::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t mainRecalPlan::group_id() const {
  // @@protoc_insertion_point(field_get:proxy_proto.mainRecalPlan.group_id)
  return _internal_group_id();
}
inline void mainRecalPlan::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void mainRecalPlan::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:proxy_proto.mainRecalPlan.group_id)
}

// -------------------------------------------------------------------

// RecalReply

// string result = 1;
inline void RecalReply::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& RecalReply::result() const {
  // @@protoc_insertion_point(field_get:proxy_proto.RecalReply.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecalReply::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.RecalReply.result)
}
inline std::string* RecalReply::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:proxy_proto.RecalReply.result)
  return _s;
}
inline const std::string& RecalReply::_internal_result() const {
  return _impl_.result_.Get();
}
inline void RecalReply::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* RecalReply::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* RecalReply::release_result() {
  // @@protoc_insertion_point(field_release:proxy_proto.RecalReply.result)
  return _impl_.result_.Release();
}
inline void RecalReply::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.RecalReply.result)
}

// -------------------------------------------------------------------

// helpRecalPlan

// bool type = 1;
inline void helpRecalPlan::clear_type() {
  _impl_.type_ = false;
}
inline bool helpRecalPlan::_internal_type() const {
  return _impl_.type_;
}
inline bool helpRecalPlan::type() const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.type)
  return _internal_type();
}
inline void helpRecalPlan::_internal_set_type(bool value) {
  
  _impl_.type_ = value;
}
inline void helpRecalPlan::set_type(bool value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.type)
}

// bool if_partial_decoding = 2;
inline void helpRecalPlan::clear_if_partial_decoding() {
  _impl_.if_partial_decoding_ = false;
}
inline bool helpRecalPlan::_internal_if_partial_decoding() const {
  return _impl_.if_partial_decoding_;
}
inline bool helpRecalPlan::if_partial_decoding() const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.if_partial_decoding)
  return _internal_if_partial_decoding();
}
inline void helpRecalPlan::_internal_set_if_partial_decoding(bool value) {
  
  _impl_.if_partial_decoding_ = value;
}
inline void helpRecalPlan::set_if_partial_decoding(bool value) {
  _internal_set_if_partial_decoding(value);
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.if_partial_decoding)
}

// string mainproxyip = 3;
inline void helpRecalPlan::clear_mainproxyip() {
  _impl_.mainproxyip_.ClearToEmpty();
}
inline const std::string& helpRecalPlan::mainproxyip() const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.mainproxyip)
  return _internal_mainproxyip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void helpRecalPlan::set_mainproxyip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mainproxyip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.mainproxyip)
}
inline std::string* helpRecalPlan::mutable_mainproxyip() {
  std::string* _s = _internal_mutable_mainproxyip();
  // @@protoc_insertion_point(field_mutable:proxy_proto.helpRecalPlan.mainproxyip)
  return _s;
}
inline const std::string& helpRecalPlan::_internal_mainproxyip() const {
  return _impl_.mainproxyip_.Get();
}
inline void helpRecalPlan::_internal_set_mainproxyip(const std::string& value) {
  
  _impl_.mainproxyip_.Set(value, GetArenaForAllocation());
}
inline std::string* helpRecalPlan::_internal_mutable_mainproxyip() {
  
  return _impl_.mainproxyip_.Mutable(GetArenaForAllocation());
}
inline std::string* helpRecalPlan::release_mainproxyip() {
  // @@protoc_insertion_point(field_release:proxy_proto.helpRecalPlan.mainproxyip)
  return _impl_.mainproxyip_.Release();
}
inline void helpRecalPlan::set_allocated_mainproxyip(std::string* mainproxyip) {
  if (mainproxyip != nullptr) {
    
  } else {
    
  }
  _impl_.mainproxyip_.SetAllocated(mainproxyip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mainproxyip_.IsDefault()) {
    _impl_.mainproxyip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.helpRecalPlan.mainproxyip)
}

// int32 mainproxyport = 4;
inline void helpRecalPlan::clear_mainproxyport() {
  _impl_.mainproxyport_ = 0;
}
inline int32_t helpRecalPlan::_internal_mainproxyport() const {
  return _impl_.mainproxyport_;
}
inline int32_t helpRecalPlan::mainproxyport() const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.mainproxyport)
  return _internal_mainproxyport();
}
inline void helpRecalPlan::_internal_set_mainproxyport(int32_t value) {
  
  _impl_.mainproxyport_ = value;
}
inline void helpRecalPlan::set_mainproxyport(int32_t value) {
  _internal_set_mainproxyport(value);
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.mainproxyport)
}

// repeated string datanodeip = 5;
inline int helpRecalPlan::_internal_datanodeip_size() const {
  return _impl_.datanodeip_.size();
}
inline int helpRecalPlan::datanodeip_size() const {
  return _internal_datanodeip_size();
}
inline void helpRecalPlan::clear_datanodeip() {
  _impl_.datanodeip_.Clear();
}
inline std::string* helpRecalPlan::add_datanodeip() {
  std::string* _s = _internal_add_datanodeip();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.helpRecalPlan.datanodeip)
  return _s;
}
inline const std::string& helpRecalPlan::_internal_datanodeip(int index) const {
  return _impl_.datanodeip_.Get(index);
}
inline const std::string& helpRecalPlan::datanodeip(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.datanodeip)
  return _internal_datanodeip(index);
}
inline std::string* helpRecalPlan::mutable_datanodeip(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.helpRecalPlan.datanodeip)
  return _impl_.datanodeip_.Mutable(index);
}
inline void helpRecalPlan::set_datanodeip(int index, const std::string& value) {
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.datanodeip)
}
inline void helpRecalPlan::set_datanodeip(int index, std::string&& value) {
  _impl_.datanodeip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.datanodeip)
}
inline void helpRecalPlan::set_datanodeip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.helpRecalPlan.datanodeip)
}
inline void helpRecalPlan::set_datanodeip(int index, const char* value, size_t size) {
  _impl_.datanodeip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.helpRecalPlan.datanodeip)
}
inline std::string* helpRecalPlan::_internal_add_datanodeip() {
  return _impl_.datanodeip_.Add();
}
inline void helpRecalPlan::add_datanodeip(const std::string& value) {
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.helpRecalPlan.datanodeip)
}
inline void helpRecalPlan::add_datanodeip(std::string&& value) {
  _impl_.datanodeip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.helpRecalPlan.datanodeip)
}
inline void helpRecalPlan::add_datanodeip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.helpRecalPlan.datanodeip)
}
inline void helpRecalPlan::add_datanodeip(const char* value, size_t size) {
  _impl_.datanodeip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.helpRecalPlan.datanodeip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
helpRecalPlan::datanodeip() const {
  // @@protoc_insertion_point(field_list:proxy_proto.helpRecalPlan.datanodeip)
  return _impl_.datanodeip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
helpRecalPlan::mutable_datanodeip() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.helpRecalPlan.datanodeip)
  return &_impl_.datanodeip_;
}

// repeated int32 datanodeport = 6;
inline int helpRecalPlan::_internal_datanodeport_size() const {
  return _impl_.datanodeport_.size();
}
inline int helpRecalPlan::datanodeport_size() const {
  return _internal_datanodeport_size();
}
inline void helpRecalPlan::clear_datanodeport() {
  _impl_.datanodeport_.Clear();
}
inline int32_t helpRecalPlan::_internal_datanodeport(int index) const {
  return _impl_.datanodeport_.Get(index);
}
inline int32_t helpRecalPlan::datanodeport(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.datanodeport)
  return _internal_datanodeport(index);
}
inline void helpRecalPlan::set_datanodeport(int index, int32_t value) {
  _impl_.datanodeport_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.datanodeport)
}
inline void helpRecalPlan::_internal_add_datanodeport(int32_t value) {
  _impl_.datanodeport_.Add(value);
}
inline void helpRecalPlan::add_datanodeport(int32_t value) {
  _internal_add_datanodeport(value);
  // @@protoc_insertion_point(field_add:proxy_proto.helpRecalPlan.datanodeport)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
helpRecalPlan::_internal_datanodeport() const {
  return _impl_.datanodeport_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
helpRecalPlan::datanodeport() const {
  // @@protoc_insertion_point(field_list:proxy_proto.helpRecalPlan.datanodeport)
  return _internal_datanodeport();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
helpRecalPlan::_internal_mutable_datanodeport() {
  return &_impl_.datanodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
helpRecalPlan::mutable_datanodeport() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.helpRecalPlan.datanodeport)
  return _internal_mutable_datanodeport();
}

// repeated string blockkeys = 7;
inline int helpRecalPlan::_internal_blockkeys_size() const {
  return _impl_.blockkeys_.size();
}
inline int helpRecalPlan::blockkeys_size() const {
  return _internal_blockkeys_size();
}
inline void helpRecalPlan::clear_blockkeys() {
  _impl_.blockkeys_.Clear();
}
inline std::string* helpRecalPlan::add_blockkeys() {
  std::string* _s = _internal_add_blockkeys();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.helpRecalPlan.blockkeys)
  return _s;
}
inline const std::string& helpRecalPlan::_internal_blockkeys(int index) const {
  return _impl_.blockkeys_.Get(index);
}
inline const std::string& helpRecalPlan::blockkeys(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.blockkeys)
  return _internal_blockkeys(index);
}
inline std::string* helpRecalPlan::mutable_blockkeys(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.helpRecalPlan.blockkeys)
  return _impl_.blockkeys_.Mutable(index);
}
inline void helpRecalPlan::set_blockkeys(int index, const std::string& value) {
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.blockkeys)
}
inline void helpRecalPlan::set_blockkeys(int index, std::string&& value) {
  _impl_.blockkeys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.blockkeys)
}
inline void helpRecalPlan::set_blockkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.helpRecalPlan.blockkeys)
}
inline void helpRecalPlan::set_blockkeys(int index, const char* value, size_t size) {
  _impl_.blockkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.helpRecalPlan.blockkeys)
}
inline std::string* helpRecalPlan::_internal_add_blockkeys() {
  return _impl_.blockkeys_.Add();
}
inline void helpRecalPlan::add_blockkeys(const std::string& value) {
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.helpRecalPlan.blockkeys)
}
inline void helpRecalPlan::add_blockkeys(std::string&& value) {
  _impl_.blockkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.helpRecalPlan.blockkeys)
}
inline void helpRecalPlan::add_blockkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.helpRecalPlan.blockkeys)
}
inline void helpRecalPlan::add_blockkeys(const char* value, size_t size) {
  _impl_.blockkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.helpRecalPlan.blockkeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
helpRecalPlan::blockkeys() const {
  // @@protoc_insertion_point(field_list:proxy_proto.helpRecalPlan.blockkeys)
  return _impl_.blockkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
helpRecalPlan::mutable_blockkeys() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.helpRecalPlan.blockkeys)
  return &_impl_.blockkeys_;
}

// int32 block_size = 8;
inline void helpRecalPlan::clear_block_size() {
  _impl_.block_size_ = 0;
}
inline int32_t helpRecalPlan::_internal_block_size() const {
  return _impl_.block_size_;
}
inline int32_t helpRecalPlan::block_size() const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.block_size)
  return _internal_block_size();
}
inline void helpRecalPlan::_internal_set_block_size(int32_t value) {
  
  _impl_.block_size_ = value;
}
inline void helpRecalPlan::set_block_size(int32_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.block_size)
}

// repeated int32 blockids = 9;
inline int helpRecalPlan::_internal_blockids_size() const {
  return _impl_.blockids_.size();
}
inline int helpRecalPlan::blockids_size() const {
  return _internal_blockids_size();
}
inline void helpRecalPlan::clear_blockids() {
  _impl_.blockids_.Clear();
}
inline int32_t helpRecalPlan::_internal_blockids(int index) const {
  return _impl_.blockids_.Get(index);
}
inline int32_t helpRecalPlan::blockids(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.blockids)
  return _internal_blockids(index);
}
inline void helpRecalPlan::set_blockids(int index, int32_t value) {
  _impl_.blockids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.blockids)
}
inline void helpRecalPlan::_internal_add_blockids(int32_t value) {
  _impl_.blockids_.Add(value);
}
inline void helpRecalPlan::add_blockids(int32_t value) {
  _internal_add_blockids(value);
  // @@protoc_insertion_point(field_add:proxy_proto.helpRecalPlan.blockids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
helpRecalPlan::_internal_blockids() const {
  return _impl_.blockids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
helpRecalPlan::blockids() const {
  // @@protoc_insertion_point(field_list:proxy_proto.helpRecalPlan.blockids)
  return _internal_blockids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
helpRecalPlan::_internal_mutable_blockids() {
  return &_impl_.blockids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
helpRecalPlan::mutable_blockids() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.helpRecalPlan.blockids)
  return _internal_mutable_blockids();
}

// int32 parity_num = 10;
inline void helpRecalPlan::clear_parity_num() {
  _impl_.parity_num_ = 0;
}
inline int32_t helpRecalPlan::_internal_parity_num() const {
  return _impl_.parity_num_;
}
inline int32_t helpRecalPlan::parity_num() const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.parity_num)
  return _internal_parity_num();
}
inline void helpRecalPlan::_internal_set_parity_num(int32_t value) {
  
  _impl_.parity_num_ = value;
}
inline void helpRecalPlan::set_parity_num(int32_t value) {
  _internal_set_parity_num(value);
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.parity_num)
}

// int32 k = 11;
inline void helpRecalPlan::clear_k() {
  _impl_.k_ = 0;
}
inline int32_t helpRecalPlan::_internal_k() const {
  return _impl_.k_;
}
inline int32_t helpRecalPlan::k() const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.k)
  return _internal_k();
}
inline void helpRecalPlan::_internal_set_k(int32_t value) {
  
  _impl_.k_ = value;
}
inline void helpRecalPlan::set_k(int32_t value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.k)
}

// int32 encodetype = 12;
inline void helpRecalPlan::clear_encodetype() {
  _impl_.encodetype_ = 0;
}
inline int32_t helpRecalPlan::_internal_encodetype() const {
  return _impl_.encodetype_;
}
inline int32_t helpRecalPlan::encodetype() const {
  // @@protoc_insertion_point(field_get:proxy_proto.helpRecalPlan.encodetype)
  return _internal_encodetype();
}
inline void helpRecalPlan::_internal_set_encodetype(int32_t value) {
  
  _impl_.encodetype_ = value;
}
inline void helpRecalPlan::set_encodetype(int32_t value) {
  _internal_set_encodetype(value);
  // @@protoc_insertion_point(field_set:proxy_proto.helpRecalPlan.encodetype)
}

// -------------------------------------------------------------------

// blockRelocPlan

// repeated string blocktomove = 1;
inline int blockRelocPlan::_internal_blocktomove_size() const {
  return _impl_.blocktomove_.size();
}
inline int blockRelocPlan::blocktomove_size() const {
  return _internal_blocktomove_size();
}
inline void blockRelocPlan::clear_blocktomove() {
  _impl_.blocktomove_.Clear();
}
inline std::string* blockRelocPlan::add_blocktomove() {
  std::string* _s = _internal_add_blocktomove();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.blockRelocPlan.blocktomove)
  return _s;
}
inline const std::string& blockRelocPlan::_internal_blocktomove(int index) const {
  return _impl_.blocktomove_.Get(index);
}
inline const std::string& blockRelocPlan::blocktomove(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.blockRelocPlan.blocktomove)
  return _internal_blocktomove(index);
}
inline std::string* blockRelocPlan::mutable_blocktomove(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.blockRelocPlan.blocktomove)
  return _impl_.blocktomove_.Mutable(index);
}
inline void blockRelocPlan::set_blocktomove(int index, const std::string& value) {
  _impl_.blocktomove_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.blockRelocPlan.blocktomove)
}
inline void blockRelocPlan::set_blocktomove(int index, std::string&& value) {
  _impl_.blocktomove_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.blockRelocPlan.blocktomove)
}
inline void blockRelocPlan::set_blocktomove(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocktomove_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.blockRelocPlan.blocktomove)
}
inline void blockRelocPlan::set_blocktomove(int index, const char* value, size_t size) {
  _impl_.blocktomove_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.blockRelocPlan.blocktomove)
}
inline std::string* blockRelocPlan::_internal_add_blocktomove() {
  return _impl_.blocktomove_.Add();
}
inline void blockRelocPlan::add_blocktomove(const std::string& value) {
  _impl_.blocktomove_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.blockRelocPlan.blocktomove)
}
inline void blockRelocPlan::add_blocktomove(std::string&& value) {
  _impl_.blocktomove_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.blockRelocPlan.blocktomove)
}
inline void blockRelocPlan::add_blocktomove(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocktomove_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.blockRelocPlan.blocktomove)
}
inline void blockRelocPlan::add_blocktomove(const char* value, size_t size) {
  _impl_.blocktomove_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.blockRelocPlan.blocktomove)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
blockRelocPlan::blocktomove() const {
  // @@protoc_insertion_point(field_list:proxy_proto.blockRelocPlan.blocktomove)
  return _impl_.blocktomove_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
blockRelocPlan::mutable_blocktomove() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.blockRelocPlan.blocktomove)
  return &_impl_.blocktomove_;
}

// repeated string fromdatanodeip = 2;
inline int blockRelocPlan::_internal_fromdatanodeip_size() const {
  return _impl_.fromdatanodeip_.size();
}
inline int blockRelocPlan::fromdatanodeip_size() const {
  return _internal_fromdatanodeip_size();
}
inline void blockRelocPlan::clear_fromdatanodeip() {
  _impl_.fromdatanodeip_.Clear();
}
inline std::string* blockRelocPlan::add_fromdatanodeip() {
  std::string* _s = _internal_add_fromdatanodeip();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.blockRelocPlan.fromdatanodeip)
  return _s;
}
inline const std::string& blockRelocPlan::_internal_fromdatanodeip(int index) const {
  return _impl_.fromdatanodeip_.Get(index);
}
inline const std::string& blockRelocPlan::fromdatanodeip(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.blockRelocPlan.fromdatanodeip)
  return _internal_fromdatanodeip(index);
}
inline std::string* blockRelocPlan::mutable_fromdatanodeip(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.blockRelocPlan.fromdatanodeip)
  return _impl_.fromdatanodeip_.Mutable(index);
}
inline void blockRelocPlan::set_fromdatanodeip(int index, const std::string& value) {
  _impl_.fromdatanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.blockRelocPlan.fromdatanodeip)
}
inline void blockRelocPlan::set_fromdatanodeip(int index, std::string&& value) {
  _impl_.fromdatanodeip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.blockRelocPlan.fromdatanodeip)
}
inline void blockRelocPlan::set_fromdatanodeip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fromdatanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.blockRelocPlan.fromdatanodeip)
}
inline void blockRelocPlan::set_fromdatanodeip(int index, const char* value, size_t size) {
  _impl_.fromdatanodeip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.blockRelocPlan.fromdatanodeip)
}
inline std::string* blockRelocPlan::_internal_add_fromdatanodeip() {
  return _impl_.fromdatanodeip_.Add();
}
inline void blockRelocPlan::add_fromdatanodeip(const std::string& value) {
  _impl_.fromdatanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.blockRelocPlan.fromdatanodeip)
}
inline void blockRelocPlan::add_fromdatanodeip(std::string&& value) {
  _impl_.fromdatanodeip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.blockRelocPlan.fromdatanodeip)
}
inline void blockRelocPlan::add_fromdatanodeip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fromdatanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.blockRelocPlan.fromdatanodeip)
}
inline void blockRelocPlan::add_fromdatanodeip(const char* value, size_t size) {
  _impl_.fromdatanodeip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.blockRelocPlan.fromdatanodeip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
blockRelocPlan::fromdatanodeip() const {
  // @@protoc_insertion_point(field_list:proxy_proto.blockRelocPlan.fromdatanodeip)
  return _impl_.fromdatanodeip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
blockRelocPlan::mutable_fromdatanodeip() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.blockRelocPlan.fromdatanodeip)
  return &_impl_.fromdatanodeip_;
}

// repeated int32 fromdatanodeport = 3;
inline int blockRelocPlan::_internal_fromdatanodeport_size() const {
  return _impl_.fromdatanodeport_.size();
}
inline int blockRelocPlan::fromdatanodeport_size() const {
  return _internal_fromdatanodeport_size();
}
inline void blockRelocPlan::clear_fromdatanodeport() {
  _impl_.fromdatanodeport_.Clear();
}
inline int32_t blockRelocPlan::_internal_fromdatanodeport(int index) const {
  return _impl_.fromdatanodeport_.Get(index);
}
inline int32_t blockRelocPlan::fromdatanodeport(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.blockRelocPlan.fromdatanodeport)
  return _internal_fromdatanodeport(index);
}
inline void blockRelocPlan::set_fromdatanodeport(int index, int32_t value) {
  _impl_.fromdatanodeport_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.blockRelocPlan.fromdatanodeport)
}
inline void blockRelocPlan::_internal_add_fromdatanodeport(int32_t value) {
  _impl_.fromdatanodeport_.Add(value);
}
inline void blockRelocPlan::add_fromdatanodeport(int32_t value) {
  _internal_add_fromdatanodeport(value);
  // @@protoc_insertion_point(field_add:proxy_proto.blockRelocPlan.fromdatanodeport)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
blockRelocPlan::_internal_fromdatanodeport() const {
  return _impl_.fromdatanodeport_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
blockRelocPlan::fromdatanodeport() const {
  // @@protoc_insertion_point(field_list:proxy_proto.blockRelocPlan.fromdatanodeport)
  return _internal_fromdatanodeport();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
blockRelocPlan::_internal_mutable_fromdatanodeport() {
  return &_impl_.fromdatanodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
blockRelocPlan::mutable_fromdatanodeport() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.blockRelocPlan.fromdatanodeport)
  return _internal_mutable_fromdatanodeport();
}

// repeated string todatanodeip = 4;
inline int blockRelocPlan::_internal_todatanodeip_size() const {
  return _impl_.todatanodeip_.size();
}
inline int blockRelocPlan::todatanodeip_size() const {
  return _internal_todatanodeip_size();
}
inline void blockRelocPlan::clear_todatanodeip() {
  _impl_.todatanodeip_.Clear();
}
inline std::string* blockRelocPlan::add_todatanodeip() {
  std::string* _s = _internal_add_todatanodeip();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.blockRelocPlan.todatanodeip)
  return _s;
}
inline const std::string& blockRelocPlan::_internal_todatanodeip(int index) const {
  return _impl_.todatanodeip_.Get(index);
}
inline const std::string& blockRelocPlan::todatanodeip(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.blockRelocPlan.todatanodeip)
  return _internal_todatanodeip(index);
}
inline std::string* blockRelocPlan::mutable_todatanodeip(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.blockRelocPlan.todatanodeip)
  return _impl_.todatanodeip_.Mutable(index);
}
inline void blockRelocPlan::set_todatanodeip(int index, const std::string& value) {
  _impl_.todatanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.blockRelocPlan.todatanodeip)
}
inline void blockRelocPlan::set_todatanodeip(int index, std::string&& value) {
  _impl_.todatanodeip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.blockRelocPlan.todatanodeip)
}
inline void blockRelocPlan::set_todatanodeip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.todatanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.blockRelocPlan.todatanodeip)
}
inline void blockRelocPlan::set_todatanodeip(int index, const char* value, size_t size) {
  _impl_.todatanodeip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.blockRelocPlan.todatanodeip)
}
inline std::string* blockRelocPlan::_internal_add_todatanodeip() {
  return _impl_.todatanodeip_.Add();
}
inline void blockRelocPlan::add_todatanodeip(const std::string& value) {
  _impl_.todatanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.blockRelocPlan.todatanodeip)
}
inline void blockRelocPlan::add_todatanodeip(std::string&& value) {
  _impl_.todatanodeip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.blockRelocPlan.todatanodeip)
}
inline void blockRelocPlan::add_todatanodeip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.todatanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.blockRelocPlan.todatanodeip)
}
inline void blockRelocPlan::add_todatanodeip(const char* value, size_t size) {
  _impl_.todatanodeip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.blockRelocPlan.todatanodeip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
blockRelocPlan::todatanodeip() const {
  // @@protoc_insertion_point(field_list:proxy_proto.blockRelocPlan.todatanodeip)
  return _impl_.todatanodeip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
blockRelocPlan::mutable_todatanodeip() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.blockRelocPlan.todatanodeip)
  return &_impl_.todatanodeip_;
}

// repeated int32 todatanodeport = 5;
inline int blockRelocPlan::_internal_todatanodeport_size() const {
  return _impl_.todatanodeport_.size();
}
inline int blockRelocPlan::todatanodeport_size() const {
  return _internal_todatanodeport_size();
}
inline void blockRelocPlan::clear_todatanodeport() {
  _impl_.todatanodeport_.Clear();
}
inline int32_t blockRelocPlan::_internal_todatanodeport(int index) const {
  return _impl_.todatanodeport_.Get(index);
}
inline int32_t blockRelocPlan::todatanodeport(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.blockRelocPlan.todatanodeport)
  return _internal_todatanodeport(index);
}
inline void blockRelocPlan::set_todatanodeport(int index, int32_t value) {
  _impl_.todatanodeport_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.blockRelocPlan.todatanodeport)
}
inline void blockRelocPlan::_internal_add_todatanodeport(int32_t value) {
  _impl_.todatanodeport_.Add(value);
}
inline void blockRelocPlan::add_todatanodeport(int32_t value) {
  _internal_add_todatanodeport(value);
  // @@protoc_insertion_point(field_add:proxy_proto.blockRelocPlan.todatanodeport)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
blockRelocPlan::_internal_todatanodeport() const {
  return _impl_.todatanodeport_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
blockRelocPlan::todatanodeport() const {
  // @@protoc_insertion_point(field_list:proxy_proto.blockRelocPlan.todatanodeport)
  return _internal_todatanodeport();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
blockRelocPlan::_internal_mutable_todatanodeport() {
  return &_impl_.todatanodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
blockRelocPlan::mutable_todatanodeport() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.blockRelocPlan.todatanodeport)
  return _internal_mutable_todatanodeport();
}

// int32 block_size = 6;
inline void blockRelocPlan::clear_block_size() {
  _impl_.block_size_ = 0;
}
inline int32_t blockRelocPlan::_internal_block_size() const {
  return _impl_.block_size_;
}
inline int32_t blockRelocPlan::block_size() const {
  // @@protoc_insertion_point(field_get:proxy_proto.blockRelocPlan.block_size)
  return _internal_block_size();
}
inline void blockRelocPlan::_internal_set_block_size(int32_t value) {
  
  _impl_.block_size_ = value;
}
inline void blockRelocPlan::set_block_size(int32_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:proxy_proto.blockRelocPlan.block_size)
}

// -------------------------------------------------------------------

// blockRelocReply

// string result = 1;
inline void blockRelocReply::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& blockRelocReply::result() const {
  // @@protoc_insertion_point(field_get:proxy_proto.blockRelocReply.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void blockRelocReply::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.blockRelocReply.result)
}
inline std::string* blockRelocReply::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:proxy_proto.blockRelocReply.result)
  return _s;
}
inline const std::string& blockRelocReply::_internal_result() const {
  return _impl_.result_.Get();
}
inline void blockRelocReply::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* blockRelocReply::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* blockRelocReply::release_result() {
  // @@protoc_insertion_point(field_release:proxy_proto.blockRelocReply.result)
  return _impl_.result_.Release();
}
inline void blockRelocReply::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.blockRelocReply.result)
}

// -------------------------------------------------------------------

// AskIfSuccess

// int32 step = 1;
inline void AskIfSuccess::clear_step() {
  _impl_.step_ = 0;
}
inline int32_t AskIfSuccess::_internal_step() const {
  return _impl_.step_;
}
inline int32_t AskIfSuccess::step() const {
  // @@protoc_insertion_point(field_get:proxy_proto.AskIfSuccess.step)
  return _internal_step();
}
inline void AskIfSuccess::_internal_set_step(int32_t value) {
  
  _impl_.step_ = value;
}
inline void AskIfSuccess::set_step(int32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:proxy_proto.AskIfSuccess.step)
}

// -------------------------------------------------------------------

// RepIfSuccess

// bool ifsuccess = 1;
inline void RepIfSuccess::clear_ifsuccess() {
  _impl_.ifsuccess_ = false;
}
inline bool RepIfSuccess::_internal_ifsuccess() const {
  return _impl_.ifsuccess_;
}
inline bool RepIfSuccess::ifsuccess() const {
  // @@protoc_insertion_point(field_get:proxy_proto.RepIfSuccess.ifsuccess)
  return _internal_ifsuccess();
}
inline void RepIfSuccess::_internal_set_ifsuccess(bool value) {
  
  _impl_.ifsuccess_ = value;
}
inline void RepIfSuccess::set_ifsuccess(bool value) {
  _internal_set_ifsuccess(value);
  // @@protoc_insertion_point(field_set:proxy_proto.RepIfSuccess.ifsuccess)
}

// -------------------------------------------------------------------

// NodeAndBlock

// repeated string blockkeys = 1;
inline int NodeAndBlock::_internal_blockkeys_size() const {
  return _impl_.blockkeys_.size();
}
inline int NodeAndBlock::blockkeys_size() const {
  return _internal_blockkeys_size();
}
inline void NodeAndBlock::clear_blockkeys() {
  _impl_.blockkeys_.Clear();
}
inline std::string* NodeAndBlock::add_blockkeys() {
  std::string* _s = _internal_add_blockkeys();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.NodeAndBlock.blockkeys)
  return _s;
}
inline const std::string& NodeAndBlock::_internal_blockkeys(int index) const {
  return _impl_.blockkeys_.Get(index);
}
inline const std::string& NodeAndBlock::blockkeys(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.NodeAndBlock.blockkeys)
  return _internal_blockkeys(index);
}
inline std::string* NodeAndBlock::mutable_blockkeys(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.NodeAndBlock.blockkeys)
  return _impl_.blockkeys_.Mutable(index);
}
inline void NodeAndBlock::set_blockkeys(int index, const std::string& value) {
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.NodeAndBlock.blockkeys)
}
inline void NodeAndBlock::set_blockkeys(int index, std::string&& value) {
  _impl_.blockkeys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.NodeAndBlock.blockkeys)
}
inline void NodeAndBlock::set_blockkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.NodeAndBlock.blockkeys)
}
inline void NodeAndBlock::set_blockkeys(int index, const char* value, size_t size) {
  _impl_.blockkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.NodeAndBlock.blockkeys)
}
inline std::string* NodeAndBlock::_internal_add_blockkeys() {
  return _impl_.blockkeys_.Add();
}
inline void NodeAndBlock::add_blockkeys(const std::string& value) {
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.NodeAndBlock.blockkeys)
}
inline void NodeAndBlock::add_blockkeys(std::string&& value) {
  _impl_.blockkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.NodeAndBlock.blockkeys)
}
inline void NodeAndBlock::add_blockkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.NodeAndBlock.blockkeys)
}
inline void NodeAndBlock::add_blockkeys(const char* value, size_t size) {
  _impl_.blockkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.NodeAndBlock.blockkeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NodeAndBlock::blockkeys() const {
  // @@protoc_insertion_point(field_list:proxy_proto.NodeAndBlock.blockkeys)
  return _impl_.blockkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NodeAndBlock::mutable_blockkeys() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.NodeAndBlock.blockkeys)
  return &_impl_.blockkeys_;
}

// repeated string datanodeip = 2;
inline int NodeAndBlock::_internal_datanodeip_size() const {
  return _impl_.datanodeip_.size();
}
inline int NodeAndBlock::datanodeip_size() const {
  return _internal_datanodeip_size();
}
inline void NodeAndBlock::clear_datanodeip() {
  _impl_.datanodeip_.Clear();
}
inline std::string* NodeAndBlock::add_datanodeip() {
  std::string* _s = _internal_add_datanodeip();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.NodeAndBlock.datanodeip)
  return _s;
}
inline const std::string& NodeAndBlock::_internal_datanodeip(int index) const {
  return _impl_.datanodeip_.Get(index);
}
inline const std::string& NodeAndBlock::datanodeip(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.NodeAndBlock.datanodeip)
  return _internal_datanodeip(index);
}
inline std::string* NodeAndBlock::mutable_datanodeip(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.NodeAndBlock.datanodeip)
  return _impl_.datanodeip_.Mutable(index);
}
inline void NodeAndBlock::set_datanodeip(int index, const std::string& value) {
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.NodeAndBlock.datanodeip)
}
inline void NodeAndBlock::set_datanodeip(int index, std::string&& value) {
  _impl_.datanodeip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.NodeAndBlock.datanodeip)
}
inline void NodeAndBlock::set_datanodeip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.NodeAndBlock.datanodeip)
}
inline void NodeAndBlock::set_datanodeip(int index, const char* value, size_t size) {
  _impl_.datanodeip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.NodeAndBlock.datanodeip)
}
inline std::string* NodeAndBlock::_internal_add_datanodeip() {
  return _impl_.datanodeip_.Add();
}
inline void NodeAndBlock::add_datanodeip(const std::string& value) {
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.NodeAndBlock.datanodeip)
}
inline void NodeAndBlock::add_datanodeip(std::string&& value) {
  _impl_.datanodeip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.NodeAndBlock.datanodeip)
}
inline void NodeAndBlock::add_datanodeip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.NodeAndBlock.datanodeip)
}
inline void NodeAndBlock::add_datanodeip(const char* value, size_t size) {
  _impl_.datanodeip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.NodeAndBlock.datanodeip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NodeAndBlock::datanodeip() const {
  // @@protoc_insertion_point(field_list:proxy_proto.NodeAndBlock.datanodeip)
  return _impl_.datanodeip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NodeAndBlock::mutable_datanodeip() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.NodeAndBlock.datanodeip)
  return &_impl_.datanodeip_;
}

// repeated int32 datanodeport = 3;
inline int NodeAndBlock::_internal_datanodeport_size() const {
  return _impl_.datanodeport_.size();
}
inline int NodeAndBlock::datanodeport_size() const {
  return _internal_datanodeport_size();
}
inline void NodeAndBlock::clear_datanodeport() {
  _impl_.datanodeport_.Clear();
}
inline int32_t NodeAndBlock::_internal_datanodeport(int index) const {
  return _impl_.datanodeport_.Get(index);
}
inline int32_t NodeAndBlock::datanodeport(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.NodeAndBlock.datanodeport)
  return _internal_datanodeport(index);
}
inline void NodeAndBlock::set_datanodeport(int index, int32_t value) {
  _impl_.datanodeport_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.NodeAndBlock.datanodeport)
}
inline void NodeAndBlock::_internal_add_datanodeport(int32_t value) {
  _impl_.datanodeport_.Add(value);
}
inline void NodeAndBlock::add_datanodeport(int32_t value) {
  _internal_add_datanodeport(value);
  // @@protoc_insertion_point(field_add:proxy_proto.NodeAndBlock.datanodeport)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeAndBlock::_internal_datanodeport() const {
  return _impl_.datanodeport_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeAndBlock::datanodeport() const {
  // @@protoc_insertion_point(field_list:proxy_proto.NodeAndBlock.datanodeport)
  return _internal_datanodeport();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeAndBlock::_internal_mutable_datanodeport() {
  return &_impl_.datanodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeAndBlock::mutable_datanodeport() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.NodeAndBlock.datanodeport)
  return _internal_mutable_datanodeport();
}

// int32 stripe_id = 4;
inline void NodeAndBlock::clear_stripe_id() {
  _impl_.stripe_id_ = 0;
}
inline int32_t NodeAndBlock::_internal_stripe_id() const {
  return _impl_.stripe_id_;
}
inline int32_t NodeAndBlock::stripe_id() const {
  // @@protoc_insertion_point(field_get:proxy_proto.NodeAndBlock.stripe_id)
  return _internal_stripe_id();
}
inline void NodeAndBlock::_internal_set_stripe_id(int32_t value) {
  
  _impl_.stripe_id_ = value;
}
inline void NodeAndBlock::set_stripe_id(int32_t value) {
  _internal_set_stripe_id(value);
  // @@protoc_insertion_point(field_set:proxy_proto.NodeAndBlock.stripe_id)
}

// string key = 5;
inline void NodeAndBlock::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& NodeAndBlock::key() const {
  // @@protoc_insertion_point(field_get:proxy_proto.NodeAndBlock.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeAndBlock::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.NodeAndBlock.key)
}
inline std::string* NodeAndBlock::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:proxy_proto.NodeAndBlock.key)
  return _s;
}
inline const std::string& NodeAndBlock::_internal_key() const {
  return _impl_.key_.Get();
}
inline void NodeAndBlock::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeAndBlock::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeAndBlock::release_key() {
  // @@protoc_insertion_point(field_release:proxy_proto.NodeAndBlock.key)
  return _impl_.key_.Release();
}
inline void NodeAndBlock::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.NodeAndBlock.key)
}

// -------------------------------------------------------------------

// DelReply

// bool ifcommit = 1;
inline void DelReply::clear_ifcommit() {
  _impl_.ifcommit_ = false;
}
inline bool DelReply::_internal_ifcommit() const {
  return _impl_.ifcommit_;
}
inline bool DelReply::ifcommit() const {
  // @@protoc_insertion_point(field_get:proxy_proto.DelReply.ifcommit)
  return _internal_ifcommit();
}
inline void DelReply::_internal_set_ifcommit(bool value) {
  
  _impl_.ifcommit_ = value;
}
inline void DelReply::set_ifcommit(bool value) {
  _internal_set_ifcommit(value);
  // @@protoc_insertion_point(field_set:proxy_proto.DelReply.ifcommit)
}

// -------------------------------------------------------------------

// CheckaliveCMD

// string name = 1;
inline void CheckaliveCMD::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CheckaliveCMD::name() const {
  // @@protoc_insertion_point(field_get:proxy_proto.CheckaliveCMD.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckaliveCMD::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.CheckaliveCMD.name)
}
inline std::string* CheckaliveCMD::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proxy_proto.CheckaliveCMD.name)
  return _s;
}
inline const std::string& CheckaliveCMD::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CheckaliveCMD::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckaliveCMD::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckaliveCMD::release_name() {
  // @@protoc_insertion_point(field_release:proxy_proto.CheckaliveCMD.name)
  return _impl_.name_.Release();
}
inline void CheckaliveCMD::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.CheckaliveCMD.name)
}

// -------------------------------------------------------------------

// RequestResult

// bool message = 1;
inline void RequestResult::clear_message() {
  _impl_.message_ = false;
}
inline bool RequestResult::_internal_message() const {
  return _impl_.message_;
}
inline bool RequestResult::message() const {
  // @@protoc_insertion_point(field_get:proxy_proto.RequestResult.message)
  return _internal_message();
}
inline void RequestResult::_internal_set_message(bool value) {
  
  _impl_.message_ = value;
}
inline void RequestResult::set_message(bool value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:proxy_proto.RequestResult.message)
}

// -------------------------------------------------------------------

// ObjectAndPlacement

// string key = 1;
inline void ObjectAndPlacement::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ObjectAndPlacement::key() const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectAndPlacement::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.key)
}
inline std::string* ObjectAndPlacement::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:proxy_proto.ObjectAndPlacement.key)
  return _s;
}
inline const std::string& ObjectAndPlacement::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ObjectAndPlacement::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectAndPlacement::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectAndPlacement::release_key() {
  // @@protoc_insertion_point(field_release:proxy_proto.ObjectAndPlacement.key)
  return _impl_.key_.Release();
}
inline void ObjectAndPlacement::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.ObjectAndPlacement.key)
}

// int32 valuesizebyte = 2;
inline void ObjectAndPlacement::clear_valuesizebyte() {
  _impl_.valuesizebyte_ = 0;
}
inline int32_t ObjectAndPlacement::_internal_valuesizebyte() const {
  return _impl_.valuesizebyte_;
}
inline int32_t ObjectAndPlacement::valuesizebyte() const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.valuesizebyte)
  return _internal_valuesizebyte();
}
inline void ObjectAndPlacement::_internal_set_valuesizebyte(int32_t value) {
  
  _impl_.valuesizebyte_ = value;
}
inline void ObjectAndPlacement::set_valuesizebyte(int32_t value) {
  _internal_set_valuesizebyte(value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.valuesizebyte)
}

// int32 k = 3;
inline void ObjectAndPlacement::clear_k() {
  _impl_.k_ = 0;
}
inline int32_t ObjectAndPlacement::_internal_k() const {
  return _impl_.k_;
}
inline int32_t ObjectAndPlacement::k() const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.k)
  return _internal_k();
}
inline void ObjectAndPlacement::_internal_set_k(int32_t value) {
  
  _impl_.k_ = value;
}
inline void ObjectAndPlacement::set_k(int32_t value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.k)
}

// int32 l = 4;
inline void ObjectAndPlacement::clear_l() {
  _impl_.l_ = 0;
}
inline int32_t ObjectAndPlacement::_internal_l() const {
  return _impl_.l_;
}
inline int32_t ObjectAndPlacement::l() const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.l)
  return _internal_l();
}
inline void ObjectAndPlacement::_internal_set_l(int32_t value) {
  
  _impl_.l_ = value;
}
inline void ObjectAndPlacement::set_l(int32_t value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.l)
}

// int32 g_m = 5;
inline void ObjectAndPlacement::clear_g_m() {
  _impl_.g_m_ = 0;
}
inline int32_t ObjectAndPlacement::_internal_g_m() const {
  return _impl_.g_m_;
}
inline int32_t ObjectAndPlacement::g_m() const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.g_m)
  return _internal_g_m();
}
inline void ObjectAndPlacement::_internal_set_g_m(int32_t value) {
  
  _impl_.g_m_ = value;
}
inline void ObjectAndPlacement::set_g_m(int32_t value) {
  _internal_set_g_m(value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.g_m)
}

// int32 stripe_id = 6;
inline void ObjectAndPlacement::clear_stripe_id() {
  _impl_.stripe_id_ = 0;
}
inline int32_t ObjectAndPlacement::_internal_stripe_id() const {
  return _impl_.stripe_id_;
}
inline int32_t ObjectAndPlacement::stripe_id() const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.stripe_id)
  return _internal_stripe_id();
}
inline void ObjectAndPlacement::_internal_set_stripe_id(int32_t value) {
  
  _impl_.stripe_id_ = value;
}
inline void ObjectAndPlacement::set_stripe_id(int32_t value) {
  _internal_set_stripe_id(value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.stripe_id)
}

// repeated string datanodeip = 7;
inline int ObjectAndPlacement::_internal_datanodeip_size() const {
  return _impl_.datanodeip_.size();
}
inline int ObjectAndPlacement::datanodeip_size() const {
  return _internal_datanodeip_size();
}
inline void ObjectAndPlacement::clear_datanodeip() {
  _impl_.datanodeip_.Clear();
}
inline std::string* ObjectAndPlacement::add_datanodeip() {
  std::string* _s = _internal_add_datanodeip();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.ObjectAndPlacement.datanodeip)
  return _s;
}
inline const std::string& ObjectAndPlacement::_internal_datanodeip(int index) const {
  return _impl_.datanodeip_.Get(index);
}
inline const std::string& ObjectAndPlacement::datanodeip(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.datanodeip)
  return _internal_datanodeip(index);
}
inline std::string* ObjectAndPlacement::mutable_datanodeip(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.ObjectAndPlacement.datanodeip)
  return _impl_.datanodeip_.Mutable(index);
}
inline void ObjectAndPlacement::set_datanodeip(int index, const std::string& value) {
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.datanodeip)
}
inline void ObjectAndPlacement::set_datanodeip(int index, std::string&& value) {
  _impl_.datanodeip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.datanodeip)
}
inline void ObjectAndPlacement::set_datanodeip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.ObjectAndPlacement.datanodeip)
}
inline void ObjectAndPlacement::set_datanodeip(int index, const char* value, size_t size) {
  _impl_.datanodeip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.ObjectAndPlacement.datanodeip)
}
inline std::string* ObjectAndPlacement::_internal_add_datanodeip() {
  return _impl_.datanodeip_.Add();
}
inline void ObjectAndPlacement::add_datanodeip(const std::string& value) {
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.ObjectAndPlacement.datanodeip)
}
inline void ObjectAndPlacement::add_datanodeip(std::string&& value) {
  _impl_.datanodeip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.ObjectAndPlacement.datanodeip)
}
inline void ObjectAndPlacement::add_datanodeip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.ObjectAndPlacement.datanodeip)
}
inline void ObjectAndPlacement::add_datanodeip(const char* value, size_t size) {
  _impl_.datanodeip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.ObjectAndPlacement.datanodeip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ObjectAndPlacement::datanodeip() const {
  // @@protoc_insertion_point(field_list:proxy_proto.ObjectAndPlacement.datanodeip)
  return _impl_.datanodeip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ObjectAndPlacement::mutable_datanodeip() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.ObjectAndPlacement.datanodeip)
  return &_impl_.datanodeip_;
}

// repeated int32 datanodeport = 8;
inline int ObjectAndPlacement::_internal_datanodeport_size() const {
  return _impl_.datanodeport_.size();
}
inline int ObjectAndPlacement::datanodeport_size() const {
  return _internal_datanodeport_size();
}
inline void ObjectAndPlacement::clear_datanodeport() {
  _impl_.datanodeport_.Clear();
}
inline int32_t ObjectAndPlacement::_internal_datanodeport(int index) const {
  return _impl_.datanodeport_.Get(index);
}
inline int32_t ObjectAndPlacement::datanodeport(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.datanodeport)
  return _internal_datanodeport(index);
}
inline void ObjectAndPlacement::set_datanodeport(int index, int32_t value) {
  _impl_.datanodeport_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.datanodeport)
}
inline void ObjectAndPlacement::_internal_add_datanodeport(int32_t value) {
  _impl_.datanodeport_.Add(value);
}
inline void ObjectAndPlacement::add_datanodeport(int32_t value) {
  _internal_add_datanodeport(value);
  // @@protoc_insertion_point(field_add:proxy_proto.ObjectAndPlacement.datanodeport)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ObjectAndPlacement::_internal_datanodeport() const {
  return _impl_.datanodeport_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ObjectAndPlacement::datanodeport() const {
  // @@protoc_insertion_point(field_list:proxy_proto.ObjectAndPlacement.datanodeport)
  return _internal_datanodeport();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ObjectAndPlacement::_internal_mutable_datanodeport() {
  return &_impl_.datanodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ObjectAndPlacement::mutable_datanodeport() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.ObjectAndPlacement.datanodeport)
  return _internal_mutable_datanodeport();
}

// repeated string blockkeys = 9;
inline int ObjectAndPlacement::_internal_blockkeys_size() const {
  return _impl_.blockkeys_.size();
}
inline int ObjectAndPlacement::blockkeys_size() const {
  return _internal_blockkeys_size();
}
inline void ObjectAndPlacement::clear_blockkeys() {
  _impl_.blockkeys_.Clear();
}
inline std::string* ObjectAndPlacement::add_blockkeys() {
  std::string* _s = _internal_add_blockkeys();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.ObjectAndPlacement.blockkeys)
  return _s;
}
inline const std::string& ObjectAndPlacement::_internal_blockkeys(int index) const {
  return _impl_.blockkeys_.Get(index);
}
inline const std::string& ObjectAndPlacement::blockkeys(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.blockkeys)
  return _internal_blockkeys(index);
}
inline std::string* ObjectAndPlacement::mutable_blockkeys(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.ObjectAndPlacement.blockkeys)
  return _impl_.blockkeys_.Mutable(index);
}
inline void ObjectAndPlacement::set_blockkeys(int index, const std::string& value) {
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.blockkeys)
}
inline void ObjectAndPlacement::set_blockkeys(int index, std::string&& value) {
  _impl_.blockkeys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.blockkeys)
}
inline void ObjectAndPlacement::set_blockkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.ObjectAndPlacement.blockkeys)
}
inline void ObjectAndPlacement::set_blockkeys(int index, const char* value, size_t size) {
  _impl_.blockkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.ObjectAndPlacement.blockkeys)
}
inline std::string* ObjectAndPlacement::_internal_add_blockkeys() {
  return _impl_.blockkeys_.Add();
}
inline void ObjectAndPlacement::add_blockkeys(const std::string& value) {
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.ObjectAndPlacement.blockkeys)
}
inline void ObjectAndPlacement::add_blockkeys(std::string&& value) {
  _impl_.blockkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.ObjectAndPlacement.blockkeys)
}
inline void ObjectAndPlacement::add_blockkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.ObjectAndPlacement.blockkeys)
}
inline void ObjectAndPlacement::add_blockkeys(const char* value, size_t size) {
  _impl_.blockkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.ObjectAndPlacement.blockkeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ObjectAndPlacement::blockkeys() const {
  // @@protoc_insertion_point(field_list:proxy_proto.ObjectAndPlacement.blockkeys)
  return _impl_.blockkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ObjectAndPlacement::mutable_blockkeys() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.ObjectAndPlacement.blockkeys)
  return &_impl_.blockkeys_;
}

// repeated int32 blockids = 10;
inline int ObjectAndPlacement::_internal_blockids_size() const {
  return _impl_.blockids_.size();
}
inline int ObjectAndPlacement::blockids_size() const {
  return _internal_blockids_size();
}
inline void ObjectAndPlacement::clear_blockids() {
  _impl_.blockids_.Clear();
}
inline int32_t ObjectAndPlacement::_internal_blockids(int index) const {
  return _impl_.blockids_.Get(index);
}
inline int32_t ObjectAndPlacement::blockids(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.blockids)
  return _internal_blockids(index);
}
inline void ObjectAndPlacement::set_blockids(int index, int32_t value) {
  _impl_.blockids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.blockids)
}
inline void ObjectAndPlacement::_internal_add_blockids(int32_t value) {
  _impl_.blockids_.Add(value);
}
inline void ObjectAndPlacement::add_blockids(int32_t value) {
  _internal_add_blockids(value);
  // @@protoc_insertion_point(field_add:proxy_proto.ObjectAndPlacement.blockids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ObjectAndPlacement::_internal_blockids() const {
  return _impl_.blockids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ObjectAndPlacement::blockids() const {
  // @@protoc_insertion_point(field_list:proxy_proto.ObjectAndPlacement.blockids)
  return _internal_blockids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ObjectAndPlacement::_internal_mutable_blockids() {
  return &_impl_.blockids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ObjectAndPlacement::mutable_blockids() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.ObjectAndPlacement.blockids)
  return _internal_mutable_blockids();
}

// int32 block_size = 11;
inline void ObjectAndPlacement::clear_block_size() {
  _impl_.block_size_ = 0;
}
inline int32_t ObjectAndPlacement::_internal_block_size() const {
  return _impl_.block_size_;
}
inline int32_t ObjectAndPlacement::block_size() const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.block_size)
  return _internal_block_size();
}
inline void ObjectAndPlacement::_internal_set_block_size(int32_t value) {
  
  _impl_.block_size_ = value;
}
inline void ObjectAndPlacement::set_block_size(int32_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.block_size)
}

// int32 encode_type = 12;
inline void ObjectAndPlacement::clear_encode_type() {
  _impl_.encode_type_ = 0;
}
inline int32_t ObjectAndPlacement::_internal_encode_type() const {
  return _impl_.encode_type_;
}
inline int32_t ObjectAndPlacement::encode_type() const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.encode_type)
  return _internal_encode_type();
}
inline void ObjectAndPlacement::_internal_set_encode_type(int32_t value) {
  
  _impl_.encode_type_ = value;
}
inline void ObjectAndPlacement::set_encode_type(int32_t value) {
  _internal_set_encode_type(value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.encode_type)
}

// string clientip = 13;
inline void ObjectAndPlacement::clear_clientip() {
  _impl_.clientip_.ClearToEmpty();
}
inline const std::string& ObjectAndPlacement::clientip() const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.clientip)
  return _internal_clientip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectAndPlacement::set_clientip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.clientip)
}
inline std::string* ObjectAndPlacement::mutable_clientip() {
  std::string* _s = _internal_mutable_clientip();
  // @@protoc_insertion_point(field_mutable:proxy_proto.ObjectAndPlacement.clientip)
  return _s;
}
inline const std::string& ObjectAndPlacement::_internal_clientip() const {
  return _impl_.clientip_.Get();
}
inline void ObjectAndPlacement::_internal_set_clientip(const std::string& value) {
  
  _impl_.clientip_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectAndPlacement::_internal_mutable_clientip() {
  
  return _impl_.clientip_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectAndPlacement::release_clientip() {
  // @@protoc_insertion_point(field_release:proxy_proto.ObjectAndPlacement.clientip)
  return _impl_.clientip_.Release();
}
inline void ObjectAndPlacement::set_allocated_clientip(std::string* clientip) {
  if (clientip != nullptr) {
    
  } else {
    
  }
  _impl_.clientip_.SetAllocated(clientip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientip_.IsDefault()) {
    _impl_.clientip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.ObjectAndPlacement.clientip)
}

// int32 clientport = 14;
inline void ObjectAndPlacement::clear_clientport() {
  _impl_.clientport_ = 0;
}
inline int32_t ObjectAndPlacement::_internal_clientport() const {
  return _impl_.clientport_;
}
inline int32_t ObjectAndPlacement::clientport() const {
  // @@protoc_insertion_point(field_get:proxy_proto.ObjectAndPlacement.clientport)
  return _internal_clientport();
}
inline void ObjectAndPlacement::_internal_set_clientport(int32_t value) {
  
  _impl_.clientport_ = value;
}
inline void ObjectAndPlacement::set_clientport(int32_t value) {
  _internal_set_clientport(value);
  // @@protoc_insertion_point(field_set:proxy_proto.ObjectAndPlacement.clientport)
}

// -------------------------------------------------------------------

// DegradedReadRequest

// string clientip = 1;
inline void DegradedReadRequest::clear_clientip() {
  _impl_.clientip_.ClearToEmpty();
}
inline const std::string& DegradedReadRequest::clientip() const {
  // @@protoc_insertion_point(field_get:proxy_proto.DegradedReadRequest.clientip)
  return _internal_clientip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DegradedReadRequest::set_clientip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.DegradedReadRequest.clientip)
}
inline std::string* DegradedReadRequest::mutable_clientip() {
  std::string* _s = _internal_mutable_clientip();
  // @@protoc_insertion_point(field_mutable:proxy_proto.DegradedReadRequest.clientip)
  return _s;
}
inline const std::string& DegradedReadRequest::_internal_clientip() const {
  return _impl_.clientip_.Get();
}
inline void DegradedReadRequest::_internal_set_clientip(const std::string& value) {
  
  _impl_.clientip_.Set(value, GetArenaForAllocation());
}
inline std::string* DegradedReadRequest::_internal_mutable_clientip() {
  
  return _impl_.clientip_.Mutable(GetArenaForAllocation());
}
inline std::string* DegradedReadRequest::release_clientip() {
  // @@protoc_insertion_point(field_release:proxy_proto.DegradedReadRequest.clientip)
  return _impl_.clientip_.Release();
}
inline void DegradedReadRequest::set_allocated_clientip(std::string* clientip) {
  if (clientip != nullptr) {
    
  } else {
    
  }
  _impl_.clientip_.SetAllocated(clientip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientip_.IsDefault()) {
    _impl_.clientip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.DegradedReadRequest.clientip)
}

// int32 clientport = 2;
inline void DegradedReadRequest::clear_clientport() {
  _impl_.clientport_ = 0;
}
inline int32_t DegradedReadRequest::_internal_clientport() const {
  return _impl_.clientport_;
}
inline int32_t DegradedReadRequest::clientport() const {
  // @@protoc_insertion_point(field_get:proxy_proto.DegradedReadRequest.clientport)
  return _internal_clientport();
}
inline void DegradedReadRequest::_internal_set_clientport(int32_t value) {
  
  _impl_.clientport_ = value;
}
inline void DegradedReadRequest::set_clientport(int32_t value) {
  _internal_set_clientport(value);
  // @@protoc_insertion_point(field_set:proxy_proto.DegradedReadRequest.clientport)
}

// int32 failed_block_id = 3;
inline void DegradedReadRequest::clear_failed_block_id() {
  _impl_.failed_block_id_ = 0;
}
inline int32_t DegradedReadRequest::_internal_failed_block_id() const {
  return _impl_.failed_block_id_;
}
inline int32_t DegradedReadRequest::failed_block_id() const {
  // @@protoc_insertion_point(field_get:proxy_proto.DegradedReadRequest.failed_block_id)
  return _internal_failed_block_id();
}
inline void DegradedReadRequest::_internal_set_failed_block_id(int32_t value) {
  
  _impl_.failed_block_id_ = value;
}
inline void DegradedReadRequest::set_failed_block_id(int32_t value) {
  _internal_set_failed_block_id(value);
  // @@protoc_insertion_point(field_set:proxy_proto.DegradedReadRequest.failed_block_id)
}

// string failed_block_key = 4;
inline void DegradedReadRequest::clear_failed_block_key() {
  _impl_.failed_block_key_.ClearToEmpty();
}
inline const std::string& DegradedReadRequest::failed_block_key() const {
  // @@protoc_insertion_point(field_get:proxy_proto.DegradedReadRequest.failed_block_key)
  return _internal_failed_block_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DegradedReadRequest::set_failed_block_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.failed_block_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.DegradedReadRequest.failed_block_key)
}
inline std::string* DegradedReadRequest::mutable_failed_block_key() {
  std::string* _s = _internal_mutable_failed_block_key();
  // @@protoc_insertion_point(field_mutable:proxy_proto.DegradedReadRequest.failed_block_key)
  return _s;
}
inline const std::string& DegradedReadRequest::_internal_failed_block_key() const {
  return _impl_.failed_block_key_.Get();
}
inline void DegradedReadRequest::_internal_set_failed_block_key(const std::string& value) {
  
  _impl_.failed_block_key_.Set(value, GetArenaForAllocation());
}
inline std::string* DegradedReadRequest::_internal_mutable_failed_block_key() {
  
  return _impl_.failed_block_key_.Mutable(GetArenaForAllocation());
}
inline std::string* DegradedReadRequest::release_failed_block_key() {
  // @@protoc_insertion_point(field_release:proxy_proto.DegradedReadRequest.failed_block_key)
  return _impl_.failed_block_key_.Release();
}
inline void DegradedReadRequest::set_allocated_failed_block_key(std::string* failed_block_key) {
  if (failed_block_key != nullptr) {
    
  } else {
    
  }
  _impl_.failed_block_key_.SetAllocated(failed_block_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.failed_block_key_.IsDefault()) {
    _impl_.failed_block_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.DegradedReadRequest.failed_block_key)
}

// repeated string datanodeip = 5;
inline int DegradedReadRequest::_internal_datanodeip_size() const {
  return _impl_.datanodeip_.size();
}
inline int DegradedReadRequest::datanodeip_size() const {
  return _internal_datanodeip_size();
}
inline void DegradedReadRequest::clear_datanodeip() {
  _impl_.datanodeip_.Clear();
}
inline std::string* DegradedReadRequest::add_datanodeip() {
  std::string* _s = _internal_add_datanodeip();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.DegradedReadRequest.datanodeip)
  return _s;
}
inline const std::string& DegradedReadRequest::_internal_datanodeip(int index) const {
  return _impl_.datanodeip_.Get(index);
}
inline const std::string& DegradedReadRequest::datanodeip(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.DegradedReadRequest.datanodeip)
  return _internal_datanodeip(index);
}
inline std::string* DegradedReadRequest::mutable_datanodeip(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.DegradedReadRequest.datanodeip)
  return _impl_.datanodeip_.Mutable(index);
}
inline void DegradedReadRequest::set_datanodeip(int index, const std::string& value) {
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.DegradedReadRequest.datanodeip)
}
inline void DegradedReadRequest::set_datanodeip(int index, std::string&& value) {
  _impl_.datanodeip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.DegradedReadRequest.datanodeip)
}
inline void DegradedReadRequest::set_datanodeip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.DegradedReadRequest.datanodeip)
}
inline void DegradedReadRequest::set_datanodeip(int index, const char* value, size_t size) {
  _impl_.datanodeip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.DegradedReadRequest.datanodeip)
}
inline std::string* DegradedReadRequest::_internal_add_datanodeip() {
  return _impl_.datanodeip_.Add();
}
inline void DegradedReadRequest::add_datanodeip(const std::string& value) {
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.DegradedReadRequest.datanodeip)
}
inline void DegradedReadRequest::add_datanodeip(std::string&& value) {
  _impl_.datanodeip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.DegradedReadRequest.datanodeip)
}
inline void DegradedReadRequest::add_datanodeip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.DegradedReadRequest.datanodeip)
}
inline void DegradedReadRequest::add_datanodeip(const char* value, size_t size) {
  _impl_.datanodeip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.DegradedReadRequest.datanodeip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DegradedReadRequest::datanodeip() const {
  // @@protoc_insertion_point(field_list:proxy_proto.DegradedReadRequest.datanodeip)
  return _impl_.datanodeip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DegradedReadRequest::mutable_datanodeip() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.DegradedReadRequest.datanodeip)
  return &_impl_.datanodeip_;
}

// repeated int32 datanodeport = 6;
inline int DegradedReadRequest::_internal_datanodeport_size() const {
  return _impl_.datanodeport_.size();
}
inline int DegradedReadRequest::datanodeport_size() const {
  return _internal_datanodeport_size();
}
inline void DegradedReadRequest::clear_datanodeport() {
  _impl_.datanodeport_.Clear();
}
inline int32_t DegradedReadRequest::_internal_datanodeport(int index) const {
  return _impl_.datanodeport_.Get(index);
}
inline int32_t DegradedReadRequest::datanodeport(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.DegradedReadRequest.datanodeport)
  return _internal_datanodeport(index);
}
inline void DegradedReadRequest::set_datanodeport(int index, int32_t value) {
  _impl_.datanodeport_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.DegradedReadRequest.datanodeport)
}
inline void DegradedReadRequest::_internal_add_datanodeport(int32_t value) {
  _impl_.datanodeport_.Add(value);
}
inline void DegradedReadRequest::add_datanodeport(int32_t value) {
  _internal_add_datanodeport(value);
  // @@protoc_insertion_point(field_add:proxy_proto.DegradedReadRequest.datanodeport)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DegradedReadRequest::_internal_datanodeport() const {
  return _impl_.datanodeport_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DegradedReadRequest::datanodeport() const {
  // @@protoc_insertion_point(field_list:proxy_proto.DegradedReadRequest.datanodeport)
  return _internal_datanodeport();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DegradedReadRequest::_internal_mutable_datanodeport() {
  return &_impl_.datanodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DegradedReadRequest::mutable_datanodeport() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.DegradedReadRequest.datanodeport)
  return _internal_mutable_datanodeport();
}

// repeated string blockkeys = 7;
inline int DegradedReadRequest::_internal_blockkeys_size() const {
  return _impl_.blockkeys_.size();
}
inline int DegradedReadRequest::blockkeys_size() const {
  return _internal_blockkeys_size();
}
inline void DegradedReadRequest::clear_blockkeys() {
  _impl_.blockkeys_.Clear();
}
inline std::string* DegradedReadRequest::add_blockkeys() {
  std::string* _s = _internal_add_blockkeys();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.DegradedReadRequest.blockkeys)
  return _s;
}
inline const std::string& DegradedReadRequest::_internal_blockkeys(int index) const {
  return _impl_.blockkeys_.Get(index);
}
inline const std::string& DegradedReadRequest::blockkeys(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.DegradedReadRequest.blockkeys)
  return _internal_blockkeys(index);
}
inline std::string* DegradedReadRequest::mutable_blockkeys(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.DegradedReadRequest.blockkeys)
  return _impl_.blockkeys_.Mutable(index);
}
inline void DegradedReadRequest::set_blockkeys(int index, const std::string& value) {
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.DegradedReadRequest.blockkeys)
}
inline void DegradedReadRequest::set_blockkeys(int index, std::string&& value) {
  _impl_.blockkeys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.DegradedReadRequest.blockkeys)
}
inline void DegradedReadRequest::set_blockkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.DegradedReadRequest.blockkeys)
}
inline void DegradedReadRequest::set_blockkeys(int index, const char* value, size_t size) {
  _impl_.blockkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.DegradedReadRequest.blockkeys)
}
inline std::string* DegradedReadRequest::_internal_add_blockkeys() {
  return _impl_.blockkeys_.Add();
}
inline void DegradedReadRequest::add_blockkeys(const std::string& value) {
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.DegradedReadRequest.blockkeys)
}
inline void DegradedReadRequest::add_blockkeys(std::string&& value) {
  _impl_.blockkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.DegradedReadRequest.blockkeys)
}
inline void DegradedReadRequest::add_blockkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.DegradedReadRequest.blockkeys)
}
inline void DegradedReadRequest::add_blockkeys(const char* value, size_t size) {
  _impl_.blockkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.DegradedReadRequest.blockkeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DegradedReadRequest::blockkeys() const {
  // @@protoc_insertion_point(field_list:proxy_proto.DegradedReadRequest.blockkeys)
  return _impl_.blockkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DegradedReadRequest::mutable_blockkeys() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.DegradedReadRequest.blockkeys)
  return &_impl_.blockkeys_;
}

// repeated int32 blockids = 8;
inline int DegradedReadRequest::_internal_blockids_size() const {
  return _impl_.blockids_.size();
}
inline int DegradedReadRequest::blockids_size() const {
  return _internal_blockids_size();
}
inline void DegradedReadRequest::clear_blockids() {
  _impl_.blockids_.Clear();
}
inline int32_t DegradedReadRequest::_internal_blockids(int index) const {
  return _impl_.blockids_.Get(index);
}
inline int32_t DegradedReadRequest::blockids(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.DegradedReadRequest.blockids)
  return _internal_blockids(index);
}
inline void DegradedReadRequest::set_blockids(int index, int32_t value) {
  _impl_.blockids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.DegradedReadRequest.blockids)
}
inline void DegradedReadRequest::_internal_add_blockids(int32_t value) {
  _impl_.blockids_.Add(value);
}
inline void DegradedReadRequest::add_blockids(int32_t value) {
  _internal_add_blockids(value);
  // @@protoc_insertion_point(field_add:proxy_proto.DegradedReadRequest.blockids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DegradedReadRequest::_internal_blockids() const {
  return _impl_.blockids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DegradedReadRequest::blockids() const {
  // @@protoc_insertion_point(field_list:proxy_proto.DegradedReadRequest.blockids)
  return _internal_blockids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DegradedReadRequest::_internal_mutable_blockids() {
  return &_impl_.blockids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DegradedReadRequest::mutable_blockids() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.DegradedReadRequest.blockids)
  return _internal_mutable_blockids();
}

// -------------------------------------------------------------------

// RecoveryRequest

// string replaced_node_ip = 1;
inline void RecoveryRequest::clear_replaced_node_ip() {
  _impl_.replaced_node_ip_.ClearToEmpty();
}
inline const std::string& RecoveryRequest::replaced_node_ip() const {
  // @@protoc_insertion_point(field_get:proxy_proto.RecoveryRequest.replaced_node_ip)
  return _internal_replaced_node_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecoveryRequest::set_replaced_node_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.replaced_node_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.RecoveryRequest.replaced_node_ip)
}
inline std::string* RecoveryRequest::mutable_replaced_node_ip() {
  std::string* _s = _internal_mutable_replaced_node_ip();
  // @@protoc_insertion_point(field_mutable:proxy_proto.RecoveryRequest.replaced_node_ip)
  return _s;
}
inline const std::string& RecoveryRequest::_internal_replaced_node_ip() const {
  return _impl_.replaced_node_ip_.Get();
}
inline void RecoveryRequest::_internal_set_replaced_node_ip(const std::string& value) {
  
  _impl_.replaced_node_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* RecoveryRequest::_internal_mutable_replaced_node_ip() {
  
  return _impl_.replaced_node_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* RecoveryRequest::release_replaced_node_ip() {
  // @@protoc_insertion_point(field_release:proxy_proto.RecoveryRequest.replaced_node_ip)
  return _impl_.replaced_node_ip_.Release();
}
inline void RecoveryRequest::set_allocated_replaced_node_ip(std::string* replaced_node_ip) {
  if (replaced_node_ip != nullptr) {
    
  } else {
    
  }
  _impl_.replaced_node_ip_.SetAllocated(replaced_node_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.replaced_node_ip_.IsDefault()) {
    _impl_.replaced_node_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.RecoveryRequest.replaced_node_ip)
}

// int32 replaced_node_port = 2;
inline void RecoveryRequest::clear_replaced_node_port() {
  _impl_.replaced_node_port_ = 0;
}
inline int32_t RecoveryRequest::_internal_replaced_node_port() const {
  return _impl_.replaced_node_port_;
}
inline int32_t RecoveryRequest::replaced_node_port() const {
  // @@protoc_insertion_point(field_get:proxy_proto.RecoveryRequest.replaced_node_port)
  return _internal_replaced_node_port();
}
inline void RecoveryRequest::_internal_set_replaced_node_port(int32_t value) {
  
  _impl_.replaced_node_port_ = value;
}
inline void RecoveryRequest::set_replaced_node_port(int32_t value) {
  _internal_set_replaced_node_port(value);
  // @@protoc_insertion_point(field_set:proxy_proto.RecoveryRequest.replaced_node_port)
}

// int32 failed_block_id = 3;
inline void RecoveryRequest::clear_failed_block_id() {
  _impl_.failed_block_id_ = 0;
}
inline int32_t RecoveryRequest::_internal_failed_block_id() const {
  return _impl_.failed_block_id_;
}
inline int32_t RecoveryRequest::failed_block_id() const {
  // @@protoc_insertion_point(field_get:proxy_proto.RecoveryRequest.failed_block_id)
  return _internal_failed_block_id();
}
inline void RecoveryRequest::_internal_set_failed_block_id(int32_t value) {
  
  _impl_.failed_block_id_ = value;
}
inline void RecoveryRequest::set_failed_block_id(int32_t value) {
  _internal_set_failed_block_id(value);
  // @@protoc_insertion_point(field_set:proxy_proto.RecoveryRequest.failed_block_id)
}

// string failed_block_key = 4;
inline void RecoveryRequest::clear_failed_block_key() {
  _impl_.failed_block_key_.ClearToEmpty();
}
inline const std::string& RecoveryRequest::failed_block_key() const {
  // @@protoc_insertion_point(field_get:proxy_proto.RecoveryRequest.failed_block_key)
  return _internal_failed_block_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecoveryRequest::set_failed_block_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.failed_block_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.RecoveryRequest.failed_block_key)
}
inline std::string* RecoveryRequest::mutable_failed_block_key() {
  std::string* _s = _internal_mutable_failed_block_key();
  // @@protoc_insertion_point(field_mutable:proxy_proto.RecoveryRequest.failed_block_key)
  return _s;
}
inline const std::string& RecoveryRequest::_internal_failed_block_key() const {
  return _impl_.failed_block_key_.Get();
}
inline void RecoveryRequest::_internal_set_failed_block_key(const std::string& value) {
  
  _impl_.failed_block_key_.Set(value, GetArenaForAllocation());
}
inline std::string* RecoveryRequest::_internal_mutable_failed_block_key() {
  
  return _impl_.failed_block_key_.Mutable(GetArenaForAllocation());
}
inline std::string* RecoveryRequest::release_failed_block_key() {
  // @@protoc_insertion_point(field_release:proxy_proto.RecoveryRequest.failed_block_key)
  return _impl_.failed_block_key_.Release();
}
inline void RecoveryRequest::set_allocated_failed_block_key(std::string* failed_block_key) {
  if (failed_block_key != nullptr) {
    
  } else {
    
  }
  _impl_.failed_block_key_.SetAllocated(failed_block_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.failed_block_key_.IsDefault()) {
    _impl_.failed_block_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.RecoveryRequest.failed_block_key)
}

// int32 cross_rack_num = 5;
inline void RecoveryRequest::clear_cross_rack_num() {
  _impl_.cross_rack_num_ = 0;
}
inline int32_t RecoveryRequest::_internal_cross_rack_num() const {
  return _impl_.cross_rack_num_;
}
inline int32_t RecoveryRequest::cross_rack_num() const {
  // @@protoc_insertion_point(field_get:proxy_proto.RecoveryRequest.cross_rack_num)
  return _internal_cross_rack_num();
}
inline void RecoveryRequest::_internal_set_cross_rack_num(int32_t value) {
  
  _impl_.cross_rack_num_ = value;
}
inline void RecoveryRequest::set_cross_rack_num(int32_t value) {
  _internal_set_cross_rack_num(value);
  // @@protoc_insertion_point(field_set:proxy_proto.RecoveryRequest.cross_rack_num)
}

// repeated string datanodeip = 6;
inline int RecoveryRequest::_internal_datanodeip_size() const {
  return _impl_.datanodeip_.size();
}
inline int RecoveryRequest::datanodeip_size() const {
  return _internal_datanodeip_size();
}
inline void RecoveryRequest::clear_datanodeip() {
  _impl_.datanodeip_.Clear();
}
inline std::string* RecoveryRequest::add_datanodeip() {
  std::string* _s = _internal_add_datanodeip();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.RecoveryRequest.datanodeip)
  return _s;
}
inline const std::string& RecoveryRequest::_internal_datanodeip(int index) const {
  return _impl_.datanodeip_.Get(index);
}
inline const std::string& RecoveryRequest::datanodeip(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.RecoveryRequest.datanodeip)
  return _internal_datanodeip(index);
}
inline std::string* RecoveryRequest::mutable_datanodeip(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.RecoveryRequest.datanodeip)
  return _impl_.datanodeip_.Mutable(index);
}
inline void RecoveryRequest::set_datanodeip(int index, const std::string& value) {
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.RecoveryRequest.datanodeip)
}
inline void RecoveryRequest::set_datanodeip(int index, std::string&& value) {
  _impl_.datanodeip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.RecoveryRequest.datanodeip)
}
inline void RecoveryRequest::set_datanodeip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.RecoveryRequest.datanodeip)
}
inline void RecoveryRequest::set_datanodeip(int index, const char* value, size_t size) {
  _impl_.datanodeip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.RecoveryRequest.datanodeip)
}
inline std::string* RecoveryRequest::_internal_add_datanodeip() {
  return _impl_.datanodeip_.Add();
}
inline void RecoveryRequest::add_datanodeip(const std::string& value) {
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.RecoveryRequest.datanodeip)
}
inline void RecoveryRequest::add_datanodeip(std::string&& value) {
  _impl_.datanodeip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.RecoveryRequest.datanodeip)
}
inline void RecoveryRequest::add_datanodeip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.RecoveryRequest.datanodeip)
}
inline void RecoveryRequest::add_datanodeip(const char* value, size_t size) {
  _impl_.datanodeip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.RecoveryRequest.datanodeip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RecoveryRequest::datanodeip() const {
  // @@protoc_insertion_point(field_list:proxy_proto.RecoveryRequest.datanodeip)
  return _impl_.datanodeip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RecoveryRequest::mutable_datanodeip() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.RecoveryRequest.datanodeip)
  return &_impl_.datanodeip_;
}

// repeated int32 datanodeport = 7;
inline int RecoveryRequest::_internal_datanodeport_size() const {
  return _impl_.datanodeport_.size();
}
inline int RecoveryRequest::datanodeport_size() const {
  return _internal_datanodeport_size();
}
inline void RecoveryRequest::clear_datanodeport() {
  _impl_.datanodeport_.Clear();
}
inline int32_t RecoveryRequest::_internal_datanodeport(int index) const {
  return _impl_.datanodeport_.Get(index);
}
inline int32_t RecoveryRequest::datanodeport(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.RecoveryRequest.datanodeport)
  return _internal_datanodeport(index);
}
inline void RecoveryRequest::set_datanodeport(int index, int32_t value) {
  _impl_.datanodeport_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.RecoveryRequest.datanodeport)
}
inline void RecoveryRequest::_internal_add_datanodeport(int32_t value) {
  _impl_.datanodeport_.Add(value);
}
inline void RecoveryRequest::add_datanodeport(int32_t value) {
  _internal_add_datanodeport(value);
  // @@protoc_insertion_point(field_add:proxy_proto.RecoveryRequest.datanodeport)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RecoveryRequest::_internal_datanodeport() const {
  return _impl_.datanodeport_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RecoveryRequest::datanodeport() const {
  // @@protoc_insertion_point(field_list:proxy_proto.RecoveryRequest.datanodeport)
  return _internal_datanodeport();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RecoveryRequest::_internal_mutable_datanodeport() {
  return &_impl_.datanodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RecoveryRequest::mutable_datanodeport() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.RecoveryRequest.datanodeport)
  return _internal_mutable_datanodeport();
}

// repeated string blockkeys = 8;
inline int RecoveryRequest::_internal_blockkeys_size() const {
  return _impl_.blockkeys_.size();
}
inline int RecoveryRequest::blockkeys_size() const {
  return _internal_blockkeys_size();
}
inline void RecoveryRequest::clear_blockkeys() {
  _impl_.blockkeys_.Clear();
}
inline std::string* RecoveryRequest::add_blockkeys() {
  std::string* _s = _internal_add_blockkeys();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.RecoveryRequest.blockkeys)
  return _s;
}
inline const std::string& RecoveryRequest::_internal_blockkeys(int index) const {
  return _impl_.blockkeys_.Get(index);
}
inline const std::string& RecoveryRequest::blockkeys(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.RecoveryRequest.blockkeys)
  return _internal_blockkeys(index);
}
inline std::string* RecoveryRequest::mutable_blockkeys(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.RecoveryRequest.blockkeys)
  return _impl_.blockkeys_.Mutable(index);
}
inline void RecoveryRequest::set_blockkeys(int index, const std::string& value) {
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.RecoveryRequest.blockkeys)
}
inline void RecoveryRequest::set_blockkeys(int index, std::string&& value) {
  _impl_.blockkeys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.RecoveryRequest.blockkeys)
}
inline void RecoveryRequest::set_blockkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.RecoveryRequest.blockkeys)
}
inline void RecoveryRequest::set_blockkeys(int index, const char* value, size_t size) {
  _impl_.blockkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.RecoveryRequest.blockkeys)
}
inline std::string* RecoveryRequest::_internal_add_blockkeys() {
  return _impl_.blockkeys_.Add();
}
inline void RecoveryRequest::add_blockkeys(const std::string& value) {
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.RecoveryRequest.blockkeys)
}
inline void RecoveryRequest::add_blockkeys(std::string&& value) {
  _impl_.blockkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.RecoveryRequest.blockkeys)
}
inline void RecoveryRequest::add_blockkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.RecoveryRequest.blockkeys)
}
inline void RecoveryRequest::add_blockkeys(const char* value, size_t size) {
  _impl_.blockkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.RecoveryRequest.blockkeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RecoveryRequest::blockkeys() const {
  // @@protoc_insertion_point(field_list:proxy_proto.RecoveryRequest.blockkeys)
  return _impl_.blockkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RecoveryRequest::mutable_blockkeys() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.RecoveryRequest.blockkeys)
  return &_impl_.blockkeys_;
}

// repeated int32 blockids = 9;
inline int RecoveryRequest::_internal_blockids_size() const {
  return _impl_.blockids_.size();
}
inline int RecoveryRequest::blockids_size() const {
  return _internal_blockids_size();
}
inline void RecoveryRequest::clear_blockids() {
  _impl_.blockids_.Clear();
}
inline int32_t RecoveryRequest::_internal_blockids(int index) const {
  return _impl_.blockids_.Get(index);
}
inline int32_t RecoveryRequest::blockids(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.RecoveryRequest.blockids)
  return _internal_blockids(index);
}
inline void RecoveryRequest::set_blockids(int index, int32_t value) {
  _impl_.blockids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.RecoveryRequest.blockids)
}
inline void RecoveryRequest::_internal_add_blockids(int32_t value) {
  _impl_.blockids_.Add(value);
}
inline void RecoveryRequest::add_blockids(int32_t value) {
  _internal_add_blockids(value);
  // @@protoc_insertion_point(field_add:proxy_proto.RecoveryRequest.blockids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RecoveryRequest::_internal_blockids() const {
  return _impl_.blockids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RecoveryRequest::blockids() const {
  // @@protoc_insertion_point(field_list:proxy_proto.RecoveryRequest.blockids)
  return _internal_blockids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RecoveryRequest::_internal_mutable_blockids() {
  return &_impl_.blockids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RecoveryRequest::mutable_blockids() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.RecoveryRequest.blockids)
  return _internal_mutable_blockids();
}

// -------------------------------------------------------------------

// AppendStripeDataPlacement

// string key = 1;
inline void AppendStripeDataPlacement::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& AppendStripeDataPlacement::key() const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppendStripeDataPlacement::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.key)
}
inline std::string* AppendStripeDataPlacement::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:proxy_proto.AppendStripeDataPlacement.key)
  return _s;
}
inline const std::string& AppendStripeDataPlacement::_internal_key() const {
  return _impl_.key_.Get();
}
inline void AppendStripeDataPlacement::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* AppendStripeDataPlacement::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* AppendStripeDataPlacement::release_key() {
  // @@protoc_insertion_point(field_release:proxy_proto.AppendStripeDataPlacement.key)
  return _impl_.key_.Release();
}
inline void AppendStripeDataPlacement::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.AppendStripeDataPlacement.key)
}

// int32 cluster_id = 2;
inline void AppendStripeDataPlacement::clear_cluster_id() {
  _impl_.cluster_id_ = 0;
}
inline int32_t AppendStripeDataPlacement::_internal_cluster_id() const {
  return _impl_.cluster_id_;
}
inline int32_t AppendStripeDataPlacement::cluster_id() const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.cluster_id)
  return _internal_cluster_id();
}
inline void AppendStripeDataPlacement::_internal_set_cluster_id(int32_t value) {
  
  _impl_.cluster_id_ = value;
}
inline void AppendStripeDataPlacement::set_cluster_id(int32_t value) {
  _internal_set_cluster_id(value);
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.cluster_id)
}

// int32 stripe_id = 3;
inline void AppendStripeDataPlacement::clear_stripe_id() {
  _impl_.stripe_id_ = 0;
}
inline int32_t AppendStripeDataPlacement::_internal_stripe_id() const {
  return _impl_.stripe_id_;
}
inline int32_t AppendStripeDataPlacement::stripe_id() const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.stripe_id)
  return _internal_stripe_id();
}
inline void AppendStripeDataPlacement::_internal_set_stripe_id(int32_t value) {
  
  _impl_.stripe_id_ = value;
}
inline void AppendStripeDataPlacement::set_stripe_id(int32_t value) {
  _internal_set_stripe_id(value);
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.stripe_id)
}

// int32 append_size = 4;
inline void AppendStripeDataPlacement::clear_append_size() {
  _impl_.append_size_ = 0;
}
inline int32_t AppendStripeDataPlacement::_internal_append_size() const {
  return _impl_.append_size_;
}
inline int32_t AppendStripeDataPlacement::append_size() const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.append_size)
  return _internal_append_size();
}
inline void AppendStripeDataPlacement::_internal_set_append_size(int32_t value) {
  
  _impl_.append_size_ = value;
}
inline void AppendStripeDataPlacement::set_append_size(int32_t value) {
  _internal_set_append_size(value);
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.append_size)
}

// repeated string datanodeip = 5;
inline int AppendStripeDataPlacement::_internal_datanodeip_size() const {
  return _impl_.datanodeip_.size();
}
inline int AppendStripeDataPlacement::datanodeip_size() const {
  return _internal_datanodeip_size();
}
inline void AppendStripeDataPlacement::clear_datanodeip() {
  _impl_.datanodeip_.Clear();
}
inline std::string* AppendStripeDataPlacement::add_datanodeip() {
  std::string* _s = _internal_add_datanodeip();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.AppendStripeDataPlacement.datanodeip)
  return _s;
}
inline const std::string& AppendStripeDataPlacement::_internal_datanodeip(int index) const {
  return _impl_.datanodeip_.Get(index);
}
inline const std::string& AppendStripeDataPlacement::datanodeip(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.datanodeip)
  return _internal_datanodeip(index);
}
inline std::string* AppendStripeDataPlacement::mutable_datanodeip(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.AppendStripeDataPlacement.datanodeip)
  return _impl_.datanodeip_.Mutable(index);
}
inline void AppendStripeDataPlacement::set_datanodeip(int index, const std::string& value) {
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.datanodeip)
}
inline void AppendStripeDataPlacement::set_datanodeip(int index, std::string&& value) {
  _impl_.datanodeip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.datanodeip)
}
inline void AppendStripeDataPlacement::set_datanodeip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.AppendStripeDataPlacement.datanodeip)
}
inline void AppendStripeDataPlacement::set_datanodeip(int index, const char* value, size_t size) {
  _impl_.datanodeip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.AppendStripeDataPlacement.datanodeip)
}
inline std::string* AppendStripeDataPlacement::_internal_add_datanodeip() {
  return _impl_.datanodeip_.Add();
}
inline void AppendStripeDataPlacement::add_datanodeip(const std::string& value) {
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.AppendStripeDataPlacement.datanodeip)
}
inline void AppendStripeDataPlacement::add_datanodeip(std::string&& value) {
  _impl_.datanodeip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.AppendStripeDataPlacement.datanodeip)
}
inline void AppendStripeDataPlacement::add_datanodeip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.AppendStripeDataPlacement.datanodeip)
}
inline void AppendStripeDataPlacement::add_datanodeip(const char* value, size_t size) {
  _impl_.datanodeip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.AppendStripeDataPlacement.datanodeip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppendStripeDataPlacement::datanodeip() const {
  // @@protoc_insertion_point(field_list:proxy_proto.AppendStripeDataPlacement.datanodeip)
  return _impl_.datanodeip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppendStripeDataPlacement::mutable_datanodeip() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.AppendStripeDataPlacement.datanodeip)
  return &_impl_.datanodeip_;
}

// repeated int32 datanodeport = 6;
inline int AppendStripeDataPlacement::_internal_datanodeport_size() const {
  return _impl_.datanodeport_.size();
}
inline int AppendStripeDataPlacement::datanodeport_size() const {
  return _internal_datanodeport_size();
}
inline void AppendStripeDataPlacement::clear_datanodeport() {
  _impl_.datanodeport_.Clear();
}
inline int32_t AppendStripeDataPlacement::_internal_datanodeport(int index) const {
  return _impl_.datanodeport_.Get(index);
}
inline int32_t AppendStripeDataPlacement::datanodeport(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.datanodeport)
  return _internal_datanodeport(index);
}
inline void AppendStripeDataPlacement::set_datanodeport(int index, int32_t value) {
  _impl_.datanodeport_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.datanodeport)
}
inline void AppendStripeDataPlacement::_internal_add_datanodeport(int32_t value) {
  _impl_.datanodeport_.Add(value);
}
inline void AppendStripeDataPlacement::add_datanodeport(int32_t value) {
  _internal_add_datanodeport(value);
  // @@protoc_insertion_point(field_add:proxy_proto.AppendStripeDataPlacement.datanodeport)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppendStripeDataPlacement::_internal_datanodeport() const {
  return _impl_.datanodeport_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppendStripeDataPlacement::datanodeport() const {
  // @@protoc_insertion_point(field_list:proxy_proto.AppendStripeDataPlacement.datanodeport)
  return _internal_datanodeport();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppendStripeDataPlacement::_internal_mutable_datanodeport() {
  return &_impl_.datanodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppendStripeDataPlacement::mutable_datanodeport() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.AppendStripeDataPlacement.datanodeport)
  return _internal_mutable_datanodeport();
}

// repeated string blockkeys = 7;
inline int AppendStripeDataPlacement::_internal_blockkeys_size() const {
  return _impl_.blockkeys_.size();
}
inline int AppendStripeDataPlacement::blockkeys_size() const {
  return _internal_blockkeys_size();
}
inline void AppendStripeDataPlacement::clear_blockkeys() {
  _impl_.blockkeys_.Clear();
}
inline std::string* AppendStripeDataPlacement::add_blockkeys() {
  std::string* _s = _internal_add_blockkeys();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.AppendStripeDataPlacement.blockkeys)
  return _s;
}
inline const std::string& AppendStripeDataPlacement::_internal_blockkeys(int index) const {
  return _impl_.blockkeys_.Get(index);
}
inline const std::string& AppendStripeDataPlacement::blockkeys(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.blockkeys)
  return _internal_blockkeys(index);
}
inline std::string* AppendStripeDataPlacement::mutable_blockkeys(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.AppendStripeDataPlacement.blockkeys)
  return _impl_.blockkeys_.Mutable(index);
}
inline void AppendStripeDataPlacement::set_blockkeys(int index, const std::string& value) {
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.blockkeys)
}
inline void AppendStripeDataPlacement::set_blockkeys(int index, std::string&& value) {
  _impl_.blockkeys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.blockkeys)
}
inline void AppendStripeDataPlacement::set_blockkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.AppendStripeDataPlacement.blockkeys)
}
inline void AppendStripeDataPlacement::set_blockkeys(int index, const char* value, size_t size) {
  _impl_.blockkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.AppendStripeDataPlacement.blockkeys)
}
inline std::string* AppendStripeDataPlacement::_internal_add_blockkeys() {
  return _impl_.blockkeys_.Add();
}
inline void AppendStripeDataPlacement::add_blockkeys(const std::string& value) {
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.AppendStripeDataPlacement.blockkeys)
}
inline void AppendStripeDataPlacement::add_blockkeys(std::string&& value) {
  _impl_.blockkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.AppendStripeDataPlacement.blockkeys)
}
inline void AppendStripeDataPlacement::add_blockkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blockkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.AppendStripeDataPlacement.blockkeys)
}
inline void AppendStripeDataPlacement::add_blockkeys(const char* value, size_t size) {
  _impl_.blockkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.AppendStripeDataPlacement.blockkeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppendStripeDataPlacement::blockkeys() const {
  // @@protoc_insertion_point(field_list:proxy_proto.AppendStripeDataPlacement.blockkeys)
  return _impl_.blockkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppendStripeDataPlacement::mutable_blockkeys() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.AppendStripeDataPlacement.blockkeys)
  return &_impl_.blockkeys_;
}

// repeated int32 blockids = 8;
inline int AppendStripeDataPlacement::_internal_blockids_size() const {
  return _impl_.blockids_.size();
}
inline int AppendStripeDataPlacement::blockids_size() const {
  return _internal_blockids_size();
}
inline void AppendStripeDataPlacement::clear_blockids() {
  _impl_.blockids_.Clear();
}
inline int32_t AppendStripeDataPlacement::_internal_blockids(int index) const {
  return _impl_.blockids_.Get(index);
}
inline int32_t AppendStripeDataPlacement::blockids(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.blockids)
  return _internal_blockids(index);
}
inline void AppendStripeDataPlacement::set_blockids(int index, int32_t value) {
  _impl_.blockids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.blockids)
}
inline void AppendStripeDataPlacement::_internal_add_blockids(int32_t value) {
  _impl_.blockids_.Add(value);
}
inline void AppendStripeDataPlacement::add_blockids(int32_t value) {
  _internal_add_blockids(value);
  // @@protoc_insertion_point(field_add:proxy_proto.AppendStripeDataPlacement.blockids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppendStripeDataPlacement::_internal_blockids() const {
  return _impl_.blockids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppendStripeDataPlacement::blockids() const {
  // @@protoc_insertion_point(field_list:proxy_proto.AppendStripeDataPlacement.blockids)
  return _internal_blockids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppendStripeDataPlacement::_internal_mutable_blockids() {
  return &_impl_.blockids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppendStripeDataPlacement::mutable_blockids() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.AppendStripeDataPlacement.blockids)
  return _internal_mutable_blockids();
}

// repeated int32 offsets = 9;
inline int AppendStripeDataPlacement::_internal_offsets_size() const {
  return _impl_.offsets_.size();
}
inline int AppendStripeDataPlacement::offsets_size() const {
  return _internal_offsets_size();
}
inline void AppendStripeDataPlacement::clear_offsets() {
  _impl_.offsets_.Clear();
}
inline int32_t AppendStripeDataPlacement::_internal_offsets(int index) const {
  return _impl_.offsets_.Get(index);
}
inline int32_t AppendStripeDataPlacement::offsets(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.offsets)
  return _internal_offsets(index);
}
inline void AppendStripeDataPlacement::set_offsets(int index, int32_t value) {
  _impl_.offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.offsets)
}
inline void AppendStripeDataPlacement::_internal_add_offsets(int32_t value) {
  _impl_.offsets_.Add(value);
}
inline void AppendStripeDataPlacement::add_offsets(int32_t value) {
  _internal_add_offsets(value);
  // @@protoc_insertion_point(field_add:proxy_proto.AppendStripeDataPlacement.offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppendStripeDataPlacement::_internal_offsets() const {
  return _impl_.offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppendStripeDataPlacement::offsets() const {
  // @@protoc_insertion_point(field_list:proxy_proto.AppendStripeDataPlacement.offsets)
  return _internal_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppendStripeDataPlacement::_internal_mutable_offsets() {
  return &_impl_.offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppendStripeDataPlacement::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.AppendStripeDataPlacement.offsets)
  return _internal_mutable_offsets();
}

// repeated int32 sizes = 10;
inline int AppendStripeDataPlacement::_internal_sizes_size() const {
  return _impl_.sizes_.size();
}
inline int AppendStripeDataPlacement::sizes_size() const {
  return _internal_sizes_size();
}
inline void AppendStripeDataPlacement::clear_sizes() {
  _impl_.sizes_.Clear();
}
inline int32_t AppendStripeDataPlacement::_internal_sizes(int index) const {
  return _impl_.sizes_.Get(index);
}
inline int32_t AppendStripeDataPlacement::sizes(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.sizes)
  return _internal_sizes(index);
}
inline void AppendStripeDataPlacement::set_sizes(int index, int32_t value) {
  _impl_.sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.sizes)
}
inline void AppendStripeDataPlacement::_internal_add_sizes(int32_t value) {
  _impl_.sizes_.Add(value);
}
inline void AppendStripeDataPlacement::add_sizes(int32_t value) {
  _internal_add_sizes(value);
  // @@protoc_insertion_point(field_add:proxy_proto.AppendStripeDataPlacement.sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppendStripeDataPlacement::_internal_sizes() const {
  return _impl_.sizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AppendStripeDataPlacement::sizes() const {
  // @@protoc_insertion_point(field_list:proxy_proto.AppendStripeDataPlacement.sizes)
  return _internal_sizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppendStripeDataPlacement::_internal_mutable_sizes() {
  return &_impl_.sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AppendStripeDataPlacement::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.AppendStripeDataPlacement.sizes)
  return _internal_mutable_sizes();
}

// bool is_merge_parity = 11;
inline void AppendStripeDataPlacement::clear_is_merge_parity() {
  _impl_.is_merge_parity_ = false;
}
inline bool AppendStripeDataPlacement::_internal_is_merge_parity() const {
  return _impl_.is_merge_parity_;
}
inline bool AppendStripeDataPlacement::is_merge_parity() const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.is_merge_parity)
  return _internal_is_merge_parity();
}
inline void AppendStripeDataPlacement::_internal_set_is_merge_parity(bool value) {
  
  _impl_.is_merge_parity_ = value;
}
inline void AppendStripeDataPlacement::set_is_merge_parity(bool value) {
  _internal_set_is_merge_parity(value);
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.is_merge_parity)
}

// string append_mode = 12;
inline void AppendStripeDataPlacement::clear_append_mode() {
  _impl_.append_mode_.ClearToEmpty();
}
inline const std::string& AppendStripeDataPlacement::append_mode() const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.append_mode)
  return _internal_append_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppendStripeDataPlacement::set_append_mode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.append_mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.append_mode)
}
inline std::string* AppendStripeDataPlacement::mutable_append_mode() {
  std::string* _s = _internal_mutable_append_mode();
  // @@protoc_insertion_point(field_mutable:proxy_proto.AppendStripeDataPlacement.append_mode)
  return _s;
}
inline const std::string& AppendStripeDataPlacement::_internal_append_mode() const {
  return _impl_.append_mode_.Get();
}
inline void AppendStripeDataPlacement::_internal_set_append_mode(const std::string& value) {
  
  _impl_.append_mode_.Set(value, GetArenaForAllocation());
}
inline std::string* AppendStripeDataPlacement::_internal_mutable_append_mode() {
  
  return _impl_.append_mode_.Mutable(GetArenaForAllocation());
}
inline std::string* AppendStripeDataPlacement::release_append_mode() {
  // @@protoc_insertion_point(field_release:proxy_proto.AppendStripeDataPlacement.append_mode)
  return _impl_.append_mode_.Release();
}
inline void AppendStripeDataPlacement::set_allocated_append_mode(std::string* append_mode) {
  if (append_mode != nullptr) {
    
  } else {
    
  }
  _impl_.append_mode_.SetAllocated(append_mode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.append_mode_.IsDefault()) {
    _impl_.append_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.AppendStripeDataPlacement.append_mode)
}

// bool is_serialized = 13;
inline void AppendStripeDataPlacement::clear_is_serialized() {
  _impl_.is_serialized_ = false;
}
inline bool AppendStripeDataPlacement::_internal_is_serialized() const {
  return _impl_.is_serialized_;
}
inline bool AppendStripeDataPlacement::is_serialized() const {
  // @@protoc_insertion_point(field_get:proxy_proto.AppendStripeDataPlacement.is_serialized)
  return _internal_is_serialized();
}
inline void AppendStripeDataPlacement::_internal_set_is_serialized(bool value) {
  
  _impl_.is_serialized_ = value;
}
inline void AppendStripeDataPlacement::set_is_serialized(bool value) {
  _internal_set_is_serialized(value);
  // @@protoc_insertion_point(field_set:proxy_proto.AppendStripeDataPlacement.is_serialized)
}

// -------------------------------------------------------------------

// SetReply

// bool ifcommit = 1;
inline void SetReply::clear_ifcommit() {
  _impl_.ifcommit_ = false;
}
inline bool SetReply::_internal_ifcommit() const {
  return _impl_.ifcommit_;
}
inline bool SetReply::ifcommit() const {
  // @@protoc_insertion_point(field_get:proxy_proto.SetReply.ifcommit)
  return _internal_ifcommit();
}
inline void SetReply::_internal_set_ifcommit(bool value) {
  
  _impl_.ifcommit_ = value;
}
inline void SetReply::set_ifcommit(bool value) {
  _internal_set_ifcommit(value);
  // @@protoc_insertion_point(field_set:proxy_proto.SetReply.ifcommit)
}

// -------------------------------------------------------------------

// GetReply

// bool getsuccess = 1;
inline void GetReply::clear_getsuccess() {
  _impl_.getsuccess_ = false;
}
inline bool GetReply::_internal_getsuccess() const {
  return _impl_.getsuccess_;
}
inline bool GetReply::getsuccess() const {
  // @@protoc_insertion_point(field_get:proxy_proto.GetReply.getsuccess)
  return _internal_getsuccess();
}
inline void GetReply::_internal_set_getsuccess(bool value) {
  
  _impl_.getsuccess_ = value;
}
inline void GetReply::set_getsuccess(bool value) {
  _internal_set_getsuccess(value);
  // @@protoc_insertion_point(field_set:proxy_proto.GetReply.getsuccess)
}

// -------------------------------------------------------------------

// StripeAndBlockIDs

// int32 stripe_id = 1;
inline void StripeAndBlockIDs::clear_stripe_id() {
  _impl_.stripe_id_ = 0;
}
inline int32_t StripeAndBlockIDs::_internal_stripe_id() const {
  return _impl_.stripe_id_;
}
inline int32_t StripeAndBlockIDs::stripe_id() const {
  // @@protoc_insertion_point(field_get:proxy_proto.StripeAndBlockIDs.stripe_id)
  return _internal_stripe_id();
}
inline void StripeAndBlockIDs::_internal_set_stripe_id(int32_t value) {
  
  _impl_.stripe_id_ = value;
}
inline void StripeAndBlockIDs::set_stripe_id(int32_t value) {
  _internal_set_stripe_id(value);
  // @@protoc_insertion_point(field_set:proxy_proto.StripeAndBlockIDs.stripe_id)
}

// int32 group_id = 2;
inline void StripeAndBlockIDs::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t StripeAndBlockIDs::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t StripeAndBlockIDs::group_id() const {
  // @@protoc_insertion_point(field_get:proxy_proto.StripeAndBlockIDs.group_id)
  return _internal_group_id();
}
inline void StripeAndBlockIDs::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void StripeAndBlockIDs::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:proxy_proto.StripeAndBlockIDs.group_id)
}

// string clientip = 3;
inline void StripeAndBlockIDs::clear_clientip() {
  _impl_.clientip_.ClearToEmpty();
}
inline const std::string& StripeAndBlockIDs::clientip() const {
  // @@protoc_insertion_point(field_get:proxy_proto.StripeAndBlockIDs.clientip)
  return _internal_clientip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StripeAndBlockIDs::set_clientip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proxy_proto.StripeAndBlockIDs.clientip)
}
inline std::string* StripeAndBlockIDs::mutable_clientip() {
  std::string* _s = _internal_mutable_clientip();
  // @@protoc_insertion_point(field_mutable:proxy_proto.StripeAndBlockIDs.clientip)
  return _s;
}
inline const std::string& StripeAndBlockIDs::_internal_clientip() const {
  return _impl_.clientip_.Get();
}
inline void StripeAndBlockIDs::_internal_set_clientip(const std::string& value) {
  
  _impl_.clientip_.Set(value, GetArenaForAllocation());
}
inline std::string* StripeAndBlockIDs::_internal_mutable_clientip() {
  
  return _impl_.clientip_.Mutable(GetArenaForAllocation());
}
inline std::string* StripeAndBlockIDs::release_clientip() {
  // @@protoc_insertion_point(field_release:proxy_proto.StripeAndBlockIDs.clientip)
  return _impl_.clientip_.Release();
}
inline void StripeAndBlockIDs::set_allocated_clientip(std::string* clientip) {
  if (clientip != nullptr) {
    
  } else {
    
  }
  _impl_.clientip_.SetAllocated(clientip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientip_.IsDefault()) {
    _impl_.clientip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proxy_proto.StripeAndBlockIDs.clientip)
}

// int32 clientport = 4;
inline void StripeAndBlockIDs::clear_clientport() {
  _impl_.clientport_ = 0;
}
inline int32_t StripeAndBlockIDs::_internal_clientport() const {
  return _impl_.clientport_;
}
inline int32_t StripeAndBlockIDs::clientport() const {
  // @@protoc_insertion_point(field_get:proxy_proto.StripeAndBlockIDs.clientport)
  return _internal_clientport();
}
inline void StripeAndBlockIDs::_internal_set_clientport(int32_t value) {
  
  _impl_.clientport_ = value;
}
inline void StripeAndBlockIDs::set_clientport(int32_t value) {
  _internal_set_clientport(value);
  // @@protoc_insertion_point(field_set:proxy_proto.StripeAndBlockIDs.clientport)
}

// repeated int32 block_ids = 5;
inline int StripeAndBlockIDs::_internal_block_ids_size() const {
  return _impl_.block_ids_.size();
}
inline int StripeAndBlockIDs::block_ids_size() const {
  return _internal_block_ids_size();
}
inline void StripeAndBlockIDs::clear_block_ids() {
  _impl_.block_ids_.Clear();
}
inline int32_t StripeAndBlockIDs::_internal_block_ids(int index) const {
  return _impl_.block_ids_.Get(index);
}
inline int32_t StripeAndBlockIDs::block_ids(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.StripeAndBlockIDs.block_ids)
  return _internal_block_ids(index);
}
inline void StripeAndBlockIDs::set_block_ids(int index, int32_t value) {
  _impl_.block_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.StripeAndBlockIDs.block_ids)
}
inline void StripeAndBlockIDs::_internal_add_block_ids(int32_t value) {
  _impl_.block_ids_.Add(value);
}
inline void StripeAndBlockIDs::add_block_ids(int32_t value) {
  _internal_add_block_ids(value);
  // @@protoc_insertion_point(field_add:proxy_proto.StripeAndBlockIDs.block_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StripeAndBlockIDs::_internal_block_ids() const {
  return _impl_.block_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StripeAndBlockIDs::block_ids() const {
  // @@protoc_insertion_point(field_list:proxy_proto.StripeAndBlockIDs.block_ids)
  return _internal_block_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StripeAndBlockIDs::_internal_mutable_block_ids() {
  return &_impl_.block_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StripeAndBlockIDs::mutable_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.StripeAndBlockIDs.block_ids)
  return _internal_mutable_block_ids();
}

// repeated string block_keys = 6;
inline int StripeAndBlockIDs::_internal_block_keys_size() const {
  return _impl_.block_keys_.size();
}
inline int StripeAndBlockIDs::block_keys_size() const {
  return _internal_block_keys_size();
}
inline void StripeAndBlockIDs::clear_block_keys() {
  _impl_.block_keys_.Clear();
}
inline std::string* StripeAndBlockIDs::add_block_keys() {
  std::string* _s = _internal_add_block_keys();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.StripeAndBlockIDs.block_keys)
  return _s;
}
inline const std::string& StripeAndBlockIDs::_internal_block_keys(int index) const {
  return _impl_.block_keys_.Get(index);
}
inline const std::string& StripeAndBlockIDs::block_keys(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.StripeAndBlockIDs.block_keys)
  return _internal_block_keys(index);
}
inline std::string* StripeAndBlockIDs::mutable_block_keys(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.StripeAndBlockIDs.block_keys)
  return _impl_.block_keys_.Mutable(index);
}
inline void StripeAndBlockIDs::set_block_keys(int index, const std::string& value) {
  _impl_.block_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.StripeAndBlockIDs.block_keys)
}
inline void StripeAndBlockIDs::set_block_keys(int index, std::string&& value) {
  _impl_.block_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.StripeAndBlockIDs.block_keys)
}
inline void StripeAndBlockIDs::set_block_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.block_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.StripeAndBlockIDs.block_keys)
}
inline void StripeAndBlockIDs::set_block_keys(int index, const char* value, size_t size) {
  _impl_.block_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.StripeAndBlockIDs.block_keys)
}
inline std::string* StripeAndBlockIDs::_internal_add_block_keys() {
  return _impl_.block_keys_.Add();
}
inline void StripeAndBlockIDs::add_block_keys(const std::string& value) {
  _impl_.block_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.StripeAndBlockIDs.block_keys)
}
inline void StripeAndBlockIDs::add_block_keys(std::string&& value) {
  _impl_.block_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.StripeAndBlockIDs.block_keys)
}
inline void StripeAndBlockIDs::add_block_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.block_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.StripeAndBlockIDs.block_keys)
}
inline void StripeAndBlockIDs::add_block_keys(const char* value, size_t size) {
  _impl_.block_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.StripeAndBlockIDs.block_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StripeAndBlockIDs::block_keys() const {
  // @@protoc_insertion_point(field_list:proxy_proto.StripeAndBlockIDs.block_keys)
  return _impl_.block_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StripeAndBlockIDs::mutable_block_keys() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.StripeAndBlockIDs.block_keys)
  return &_impl_.block_keys_;
}

// repeated string datanodeips = 7;
inline int StripeAndBlockIDs::_internal_datanodeips_size() const {
  return _impl_.datanodeips_.size();
}
inline int StripeAndBlockIDs::datanodeips_size() const {
  return _internal_datanodeips_size();
}
inline void StripeAndBlockIDs::clear_datanodeips() {
  _impl_.datanodeips_.Clear();
}
inline std::string* StripeAndBlockIDs::add_datanodeips() {
  std::string* _s = _internal_add_datanodeips();
  // @@protoc_insertion_point(field_add_mutable:proxy_proto.StripeAndBlockIDs.datanodeips)
  return _s;
}
inline const std::string& StripeAndBlockIDs::_internal_datanodeips(int index) const {
  return _impl_.datanodeips_.Get(index);
}
inline const std::string& StripeAndBlockIDs::datanodeips(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.StripeAndBlockIDs.datanodeips)
  return _internal_datanodeips(index);
}
inline std::string* StripeAndBlockIDs::mutable_datanodeips(int index) {
  // @@protoc_insertion_point(field_mutable:proxy_proto.StripeAndBlockIDs.datanodeips)
  return _impl_.datanodeips_.Mutable(index);
}
inline void StripeAndBlockIDs::set_datanodeips(int index, const std::string& value) {
  _impl_.datanodeips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proxy_proto.StripeAndBlockIDs.datanodeips)
}
inline void StripeAndBlockIDs::set_datanodeips(int index, std::string&& value) {
  _impl_.datanodeips_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proxy_proto.StripeAndBlockIDs.datanodeips)
}
inline void StripeAndBlockIDs::set_datanodeips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proxy_proto.StripeAndBlockIDs.datanodeips)
}
inline void StripeAndBlockIDs::set_datanodeips(int index, const char* value, size_t size) {
  _impl_.datanodeips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proxy_proto.StripeAndBlockIDs.datanodeips)
}
inline std::string* StripeAndBlockIDs::_internal_add_datanodeips() {
  return _impl_.datanodeips_.Add();
}
inline void StripeAndBlockIDs::add_datanodeips(const std::string& value) {
  _impl_.datanodeips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proxy_proto.StripeAndBlockIDs.datanodeips)
}
inline void StripeAndBlockIDs::add_datanodeips(std::string&& value) {
  _impl_.datanodeips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proxy_proto.StripeAndBlockIDs.datanodeips)
}
inline void StripeAndBlockIDs::add_datanodeips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.datanodeips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proxy_proto.StripeAndBlockIDs.datanodeips)
}
inline void StripeAndBlockIDs::add_datanodeips(const char* value, size_t size) {
  _impl_.datanodeips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proxy_proto.StripeAndBlockIDs.datanodeips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StripeAndBlockIDs::datanodeips() const {
  // @@protoc_insertion_point(field_list:proxy_proto.StripeAndBlockIDs.datanodeips)
  return _impl_.datanodeips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StripeAndBlockIDs::mutable_datanodeips() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.StripeAndBlockIDs.datanodeips)
  return &_impl_.datanodeips_;
}

// repeated int32 datanodeports = 8;
inline int StripeAndBlockIDs::_internal_datanodeports_size() const {
  return _impl_.datanodeports_.size();
}
inline int StripeAndBlockIDs::datanodeports_size() const {
  return _internal_datanodeports_size();
}
inline void StripeAndBlockIDs::clear_datanodeports() {
  _impl_.datanodeports_.Clear();
}
inline int32_t StripeAndBlockIDs::_internal_datanodeports(int index) const {
  return _impl_.datanodeports_.Get(index);
}
inline int32_t StripeAndBlockIDs::datanodeports(int index) const {
  // @@protoc_insertion_point(field_get:proxy_proto.StripeAndBlockIDs.datanodeports)
  return _internal_datanodeports(index);
}
inline void StripeAndBlockIDs::set_datanodeports(int index, int32_t value) {
  _impl_.datanodeports_.Set(index, value);
  // @@protoc_insertion_point(field_set:proxy_proto.StripeAndBlockIDs.datanodeports)
}
inline void StripeAndBlockIDs::_internal_add_datanodeports(int32_t value) {
  _impl_.datanodeports_.Add(value);
}
inline void StripeAndBlockIDs::add_datanodeports(int32_t value) {
  _internal_add_datanodeports(value);
  // @@protoc_insertion_point(field_add:proxy_proto.StripeAndBlockIDs.datanodeports)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StripeAndBlockIDs::_internal_datanodeports() const {
  return _impl_.datanodeports_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StripeAndBlockIDs::datanodeports() const {
  // @@protoc_insertion_point(field_list:proxy_proto.StripeAndBlockIDs.datanodeports)
  return _internal_datanodeports();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StripeAndBlockIDs::_internal_mutable_datanodeports() {
  return &_impl_.datanodeports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StripeAndBlockIDs::mutable_datanodeports() {
  // @@protoc_insertion_point(field_mutable_list:proxy_proto.StripeAndBlockIDs.datanodeports)
  return _internal_mutable_datanodeports();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proxy_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proxy_2eproto
